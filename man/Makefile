# Makefile.in generated by automake 1.11.1 from Makefile.am.
# man/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Copyright (C) 1999-2004 IC & S  dbmail@ic-s.nl
#
# This program is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License 
# as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later 
# version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

pkgdatadir = $(datadir)/dbmail
pkgincludedir = $(includedir)/dbmail
pkglibdir = $(libdir)/dbmail
pkglibexecdir = $(libexecdir)/dbmail
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
subdir = man
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
SOURCES =
DIST_SOURCES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
man1dir = $(mandir)/man1
am__installdirs = "$(DESTDIR)$(man1dir)" "$(DESTDIR)$(man5dir)" \
	"$(DESTDIR)$(man8dir)"
man5dir = $(mandir)/man5
man8dir = $(mandir)/man8
NROFF = nroff
MANS = $(man1_MANS) $(man5_MANS) $(man8_MANS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/skraps/Downloads/dbmail-3.0.2/config/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/skraps/Downloads/dbmail-3.0.2/config/missing --run tar
AR = ar
AUTHALIB = modules/.libs/libauth_sql.a
AUTHLTLIB = modules/libauth_sql.la
AUTOCONF = ${SHELL} /home/skraps/Downloads/dbmail-3.0.2/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/skraps/Downloads/dbmail-3.0.2/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/skraps/Downloads/dbmail-3.0.2/config/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -pthread -I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include   -pthread -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include -I/usr/include/gmime-2.4   -I/usr/include/zdb -W -Wall -Wpointer-arith -Wstrict-prototypes
CHECK_CFLAGS = 
CHECK_LIBS = 
CPP = gcc -E
CPPFLAGS = 
CRYPTLIB = -lcrypt
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DM_CONFDIR = /etc
DM_LOGDIR = /var/log
DM_PKGLIBDIR = 
DM_STATEDIR = /var/run
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld
LDAPINC = 
LDAPLIB = 
LDFLAGS =  -Wl,--export-dynamic -pthread -lgmodule-2.0 -lrt -lglib-2.0   -pthread -lgmime-2.4 -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0   -lm -lmhash -levent -lssl -lzdb
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /home/skraps/Downloads/dbmail-3.0.2/config/missing --run makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = dbmail
PACKAGE_BUGREPORT = dbmail@dbmail.org
PACKAGE_NAME = dbmail
PACKAGE_STRING = dbmail 3.0.2
PACKAGE_TARNAME = dbmail
PACKAGE_URL = 
PACKAGE_VERSION = 3.0.2
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SIEVEINC = 
SIEVELIB = 
SOCKETLIB = -lresolv 
SORTALIB = modules/.libs/libsort_null.a
SORTLTLIB = modules/libsort_null.la
SQLITECREATE = "-- Copyright (C) 2005 Internet Connection, Inc.\n" \
"-- Copyright (C) 2006-2010 NFG Net Facilities Group BV.\n" \
"--\n" \
"-- This program is free software; you can redistribute it and/or \n" \
"-- modify it under the terms of the GNU General Public License \n" \
"-- as published by the Free Software Foundation; either \n" \
"-- version 2 of the License, or (at your option) any later \n" \
"-- version.\n" \
"--\n" \
"-- This program is distributed in the hope that it will be useful,\n" \
"-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n" \
"-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" \
"-- GNU General Public License for more details.\n" \
"--\n" \
"-- You should have received a copy of the GNU General Public License\n" \
"-- along with this program; if not, write to the Free Software\n" \
"-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n" \
"-- \n" \
"\n" \
"BEGIN TRANSACTION;\n" \
"\n" \
"PRAGMA auto_vacuum = 1;\n" \
"\n" \
"CREATE TABLE dbmail_aliases (\n" \
"   alias_idnr INTEGER PRIMARY KEY,\n" \
"   alias TEXT NOT NULL,\n" \
"   deliver_to TEXT NOT NULL,\n" \
"   client_idnr INTEGER DEFAULT '0' NOT NULL\n" \
");\n" \
"CREATE INDEX dbmail_aliases_index_1 ON dbmail_aliases(alias);\n" \
"CREATE INDEX dbmail_aliases_index_2 ON dbmail_aliases(client_idnr);\n" \
"\n" \
"CREATE TABLE dbmail_authlog (\n" \
"  id INTEGER PRIMARY KEY,\n" \
"  userid TEXT,\n" \
"  service TEXT,\n" \
"  login_time DATETIME,\n" \
"  logout_time DATETIME,\n" \
"  src_ip TEXT,\n" \
"  src_port INTEGER,\n" \
"  dst_ip TEXT,\n" \
"  dst_port INTEGER,\n" \
"  status TEXT DEFAULT 'active',\n" \
"  bytes_rx INTEGER DEFAULT '0' NOT NULL,\n" \
"  bytes_tx INTEGER DEFAULT '0' NOT NULL\n" \
");\n" \
"\n" \
"CREATE TABLE dbmail_users (\n" \
"   user_idnr INTEGER PRIMARY KEY,\n" \
"   userid TEXT NOT NULL,\n" \
"   passwd TEXT NOT NULL,\n" \
"   client_idnr INTEGER DEFAULT '0' NOT NULL,\n" \
"   maxmail_size INTEGER DEFAULT '0' NOT NULL,\n" \
"   curmail_size INTEGER DEFAULT '0' NOT NULL,\n" \
"   encryption_type TEXT DEFAULT '' NOT NULL,\n" \
"   last_login DATETIME DEFAULT '1979-11-03 22:05:58' NOT NULL\n" \
");\n" \
"CREATE UNIQUE INDEX dbmail_users_1 ON dbmail_users(userid);\n" \
"\n" \
"CREATE TABLE dbmail_mailboxes (\n" \
"   mailbox_idnr INTEGER PRIMARY KEY,\n" \
"   owner_idnr INTEGER DEFAULT '0' NOT NULL,\n" \
"   name TEXT BINARY NOT NULL,\n" \
"   seq INTEGER DEFAULT '0' NOT NULL,\n" \
"   seen_flag BOOLEAN default '0' not null,\n" \
"   answered_flag BOOLEAN default '0' not null,\n" \
"   deleted_flag BOOLEAN default '0' not null,\n" \
"   flagged_flag BOOLEAN default '0' not null,\n" \
"   recent_flag BOOLEAN default '0' not null,\n" \
"   draft_flag BOOLEAN default '0' not null,\n" \
"   no_inferiors BOOLEAN default '0' not null,\n" \
"   no_select BOOLEAN default '0' not null,\n" \
"   permission BOOLEAN default '2'\n" \
");\n" \
"CREATE INDEX dbmail_mailboxes_1 ON dbmail_mailboxes(name);\n" \
"CREATE INDEX dbmail_mailboxes_2 ON dbmail_mailboxes(owner_idnr);\n" \
"CREATE UNIQUE INDEX dbmail_mailboxes_3 ON dbmail_mailboxes(owner_idnr,name);\n" \
"CREATE INDEX dbmail_mailbox_4 ON dbmail_mailboxes(seq);\n" \
"\n" \
"CREATE TRIGGER fk_insert_mailboxes_users_idnr\n" \
"	BEFORE INSERT ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.owner_idnr IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_mailboxes\" violates foreign key constraint \"fk_insert_mailboxes_users_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_mailboxes_users_idnr\n" \
"	BEFORE UPDATE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.owner_idnr IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_mailboxes\" violates foreign key constraint \"fk_update2_mailboxes_users_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_mailboxes_users_idnr\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_mailboxes SET owner_idnr = new.user_idnr WHERE owner_idnr = OLD.user_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_mailboxes_users_idnr\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_mailboxes WHERE owner_idnr = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_subscription (\n" \
"	user_id INTEGER NOT NULL,\n" \
"	mailbox_id INTEGER NOT NULL\n" \
");\n" \
"CREATE UNIQUE INDEX dbmail_subscriptioin_1 ON dbmail_subscription(user_id, mailbox_id);\n" \
"\n" \
"CREATE TRIGGER fk_insert_subscription_users_idnr\n" \
"	BEFORE INSERT ON dbmail_subscription\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_subscription\" violates foreign key constraint \"fk_insert_subscription_users_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_subscription_users_idnr\n" \
"	BEFORE UPDATE ON dbmail_subscription\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_subscription\" violates foreign key constraint \"fk_update1_subscription_users_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_subscription_users_idnr\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_subscription SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_subscription_users_idnr\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_subscription WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_insert_subscription_mailbox_id\n" \
"	BEFORE INSERT ON dbmail_subscription\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_id IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_subscription\" violates foreign key constraint \"fk_insert_subscription_mailbox_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_subscription_mailbox_id\n" \
"	BEFORE UPDATE ON dbmail_subscription\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_id IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_subscription\" violates foreign key constraint \"fk_update1_subscription_mailbox_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_subscription_mailbox_id\n" \
"	AFTER UPDATE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_subscription SET mailbox_id = new.mailbox_idnr WHERE mailbox_id = OLD.mailbox_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_subscription_mailbox_id\n" \
"	BEFORE DELETE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_subscription WHERE mailbox_id = OLD.mailbox_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_acl (\n" \
"	user_id INTEGER NOT NULL,\n" \
"	mailbox_id INTEGER NOT NULL,\n" \
"	lookup_flag BOOLEAN default '0' not null,\n" \
"	read_flag BOOLEAN default '0' not null,\n" \
"	seen_flag BOOLEAN default '0' not null,\n" \
"	write_flag BOOLEAN default '0' not null,\n" \
"	insert_flag BOOLEAN default '0' not null,	\n" \
"	post_flag BOOLEAN default '0' not null,\n" \
"	create_flag BOOLEAN default '0' not null,	\n" \
"	delete_flag BOOLEAN default '0' not null,	\n" \
"	deleted_flag BOOLEAN default '0' not null,	\n" \
"	expunge_flag BOOLEAN default '0' not null,	\n" \
"	administer_flag BOOLEAN default '0' not null\n" \
");\n" \
"CREATE INDEX dbmail_acl_1 ON dbmail_acl(user_id);\n" \
"CREATE INDEX dbmail_acl_2 ON dbmail_acl(mailbox_id);\n" \
"CREATE UNIQUE INDEX dbmail_acl_3 ON dbmail_acl(user_id, mailbox_id);\n" \
"\n" \
"CREATE TRIGGER fk_insert_acl_user_id\n" \
"	BEFORE INSERT ON dbmail_acl\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_acl\" violates foreign key constraint \"fk_insert_acl_user_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_acl_user_id\n" \
"	BEFORE UPDATE ON dbmail_acl\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_acl\" violates foreign key constraint \"fk_update1_acl_user_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_acl_user_id\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_acl SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_acl_user_id\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_acl WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_insert_acl_mailbox_id\n" \
"	BEFORE INSERT ON dbmail_acl\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_id IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_acl\" violates foreign key constraint \"fk_insert_acl_mailbox_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_acl_mailbox_id\n" \
"	BEFORE UPDATE ON dbmail_acl\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_id IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_acl\" violates foreign key constraint \"fk_update1_acl_mailbox_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_acl_mailbox_id\n" \
"	AFTER UPDATE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_acl SET mailbox_id = new.mailbox_idnr WHERE mailbox_id = OLD.mailbox_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_acl_mailbox_id\n" \
"	BEFORE DELETE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_acl WHERE mailbox_id = OLD.mailbox_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_physmessage (\n" \
"   id INTEGER PRIMARY KEY,\n" \
"   messagesize INTEGER DEFAULT '0' NOT NULL,\n" \
"   rfcsize INTEGER DEFAULT '0' NOT NULL,\n" \
"   internal_date DATETIME default '0' not null\n" \
");\n" \
" \n" \
"CREATE TABLE dbmail_messages (\n" \
"   message_idnr INTEGER PRIMARY KEY,\n" \
"   mailbox_idnr INTEGER DEFAULT '0' NOT NULL,\n" \
"   physmessage_id INTEGER DEFAULT '0' NOT NULL,\n" \
"   seen_flag BOOLEAN default '0' not null,\n" \
"   answered_flag BOOLEAN default '0' not null,\n" \
"   deleted_flag BOOLEAN default '0' not null,\n" \
"   flagged_flag BOOLEAN default '0' not null,\n" \
"   recent_flag BOOLEAN default '0' not null,\n" \
"   draft_flag BOOLEAN default '0' not null,\n" \
"   unique_id TEXT NOT NULL,\n" \
"   status BOOLEAN unsigned default '0' not null\n" \
");\n" \
"CREATE INDEX dbmail_messages_1 ON dbmail_messages(mailbox_idnr);\n" \
"CREATE INDEX dbmail_messages_2 ON dbmail_messages(physmessage_id);\n" \
"CREATE INDEX dbmail_messages_3 ON dbmail_messages(seen_flag);\n" \
"CREATE INDEX dbmail_messages_4 ON dbmail_messages(unique_id);\n" \
"CREATE INDEX dbmail_messages_5 ON dbmail_messages(status);\n" \
"CREATE INDEX dbmail_messages_6 ON dbmail_messages(mailbox_idnr,status);\n" \
"CREATE INDEX dbmail_messages_7 ON dbmail_messages(mailbox_idnr,status,seen_flag);\n" \
"CREATE INDEX dbmail_messages_8 ON dbmail_messages(mailbox_idnr,status,recent_flag);\n" \
"\n" \
"CREATE TRIGGER fk_insert_messages_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_messages\" violates foreign key constraint \"fk_insert_messages_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_messages_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_messages\" violates foreign key constraint \"fk_update1_messages_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_messages_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_messages SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_message_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_messages WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"\n" \
"CREATE TRIGGER fk_insert_messages_mailbox_idnr\n" \
"	BEFORE INSERT ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_idnr IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_messages\" violates foreign key constraint \"fk_insert_messages_mailbox_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_messages_mailbox_idnr\n" \
"	BEFORE UPDATE ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_idnr IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_messages\" violates foreign key constraint \"fk_update1_messages_mailbox_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_messages_mailbox_idnr\n" \
"	AFTER UPDATE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_messages SET mailbox_idnr = new.mailbox_idnr WHERE mailbox_idnr = OLD.mailbox_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_messages_mailbox_idnr\n" \
"	BEFORE DELETE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_messages WHERE mailbox_idnr = OLD.mailbox_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"   \n" \
"CREATE TABLE dbmail_messageblks (\n" \
"   messageblk_idnr INTEGER PRIMARY KEY,\n" \
"   physmessage_id INTEGER DEFAULT '0' NOT NULL,\n" \
"   messageblk TEXT NOT NULL,\n" \
"   blocksize INTEGER DEFAULT '0' NOT NULL,\n" \
"   is_header BOOLEAN DEFAULT '0' NOT NULL\n" \
");\n" \
"CREATE INDEX dbmail_messageblks_1 ON dbmail_messageblks(physmessage_id);\n" \
"CREATE INDEX dbmail_messageblks_2 ON dbmail_messageblks(physmessage_id, is_header);\n" \
"\n" \
"CREATE TRIGGER fk_insert_messageblks_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_messageblks\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_messageblks\" violates foreign key constraint \"fk_insert_messageblks_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_messageblks_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_messageblks\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_messageblks\" violates foreign key constraint \"fk_update1_messageblks_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_messageblks_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_messageblks SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_messageblks_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_messageblks WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
" \n" \
"CREATE TABLE dbmail_auto_replies (\n" \
"   user_idnr INTEGER PRIMARY KEY,\n" \
"   reply_body TEXT,  \n" \
"   start_date DATETIME DEFAULT '1980-01-01 22:05:58' NOT NULL,\n" \
"   stop_date DATETIME DEFAULT '1980-01-01 22:05:58' NOT NULL\n" \
");                   \n" \
"CREATE TRIGGER fk_insert_auto_replies_user_idnr\n" \
"        BEFORE INSERT ON dbmail_auto_replies\n" \
"        FOR EACH ROW BEGIN\n" \
"                SELECT CASE \n" \
"                        WHEN (new.user_idnr IS NOT NULL)\n" \
"                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)\n" \
"                        THEN RAISE (ABORT, 'insert on table \"dbmail_auto_replies\" violates foreign key constraint \"fk_insert_auto_replies_user_idnr\"')\n" \
"                END; \n" \
"        END;         \n" \
"CREATE TRIGGER fk_update1_auto_replies_user_idnr\n" \
"        BEFORE UPDATE ON dbmail_auto_replies\n" \
"        FOR EACH ROW BEGIN\n" \
"                SELECT CASE \n" \
"                        WHEN (new.user_idnr IS NOT NULL)\n" \
"                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)\n" \
"                        THEN RAISE (ABORT, 'update on table \"dbmail_auto_replies\" violates foreign key constraint \"fk_update1_auto_replies_user_idnr\"')\n" \
"                END; \n" \
"        END;         \n" \
"CREATE TRIGGER fk_update2_auto_replies_user_idnr\n" \
"        AFTER UPDATE ON dbmail_users\n" \
"        FOR EACH ROW BEGIN\n" \
"                UPDATE dbmail_auto_replies SET user_idnr = new.user_idnr WHERE user_idnr = OLD.user_idnr;\n" \
"        END;         \n" \
"CREATE TRIGGER fk_delete_auto_replies_user_idnr\n" \
"        BEFORE DELETE ON dbmail_users\n" \
"        FOR EACH ROW BEGIN\n" \
"                DELETE FROM dbmail_auto_replies WHERE user_idnr = OLD.user_idnr;\n" \
"        END;         \n" \
"                     \n" \
"CREATE TABLE dbmail_auto_notifications (\n" \
"   user_idnr INTEGER PRIMARY KEY,\n" \
"   notify_address TEXT  \n" \
");                   \n" \
"\n" \
"CREATE TRIGGER fk_insert_auto_notifications_user_idnr\n" \
"        BEFORE INSERT ON dbmail_auto_notifications\n" \
"        FOR EACH ROW BEGIN\n" \
"                SELECT CASE \n" \
"                        WHEN (new.user_idnr IS NOT NULL)\n" \
"                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)\n" \
"                        THEN RAISE (ABORT, 'insert on table \"dbmail_auto_notifications\" violates foreign key constraint \"fk_insert_auto_notifications_user_idnr\"')\n" \
"                END; \n" \
"        END;         \n" \
"CREATE TRIGGER fk_update1_auto_notifications_user_idnr\n" \
"        BEFORE UPDATE ON dbmail_auto_notifications\n" \
"        FOR EACH ROW BEGIN\n" \
"                SELECT CASE \n" \
"                        WHEN (new.user_idnr IS NOT NULL)\n" \
"                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)\n" \
"                        THEN RAISE (ABORT, 'update on table \"dbmail_auto_notifications\" violates foreign key constraint \"fk_update1_auto_notifications_user_idnr\"')\n" \
"                END; \n" \
"        END;         \n" \
"CREATE TRIGGER fk_update2_auto_notifications_user_idnr\n" \
"        AFTER UPDATE ON dbmail_users\n" \
"        FOR EACH ROW BEGIN\n" \
"                UPDATE dbmail_auto_notifications SET user_idnr = new.user_idnr WHERE user_idnr = OLD.user_idnr;\n" \
"        END;         \n" \
"CREATE TRIGGER fk_delete_auto_notifications_user_idnr\n" \
"        BEFORE DELETE ON dbmail_users\n" \
"        FOR EACH ROW BEGIN\n" \
"                DELETE FROM dbmail_auto_notifications WHERE user_idnr = OLD.user_idnr;\n" \
"        END;         \n" \
"                     \n" \
"\n" \
"\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_pbsp (\n" \
"   idnr INTEGER PRIMARY KEY,\n" \
"   since DATETIME default '0' not null,\n" \
"   ipnumber TEXT NOT NULL\n" \
");\n" \
"CREATE UNIQUE INDEX dbmail_pbsp_1 ON dbmail_pbsp(ipnumber);\n" \
"CREATE INDEX dbmail_pbsp_2 ON dbmail_pbsp(since);\n" \
"\n" \
"CREATE TABLE dbmail_sievescripts (\n" \
"  owner_idnr INTEGER DEFAULT '0' NOT NULL,\n" \
"  name TEXT NOT NULL,\n" \
"  script TEXT,\n" \
"  active BOOLEAN default '0' not null\n" \
");\n" \
"CREATE INDEX dbmail_sievescripts_1 ON dbmail_sievescripts(name);\n" \
"CREATE INDEX dbmail_sievescripts_2 ON dbmail_sievescripts(owner_idnr);\n" \
"CREATE UNIQUE INDEX dbmail_sievescripts_3 ON dbmail_sievescripts(owner_idnr,name);\n" \
"\n" \
"CREATE TRIGGER fk_insert_sievescripts_owner_idnr\n" \
"	BEFORE INSERT ON dbmail_sievescripts\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.owner_idnr IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_sievescripts\" violates foreign key constraint \"fk_insert_sievescripts_owner_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_sievescripts_owner_idnr\n" \
"	BEFORE UPDATE ON dbmail_sievescripts\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.owner_idnr IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_sievescripts\" violates foreign key constraint \"fk_update1_sievescripts_owner_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_sievescripts_owner_idnr\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_sievescripts SET owner_idnr = new.user_idnr WHERE owner_idnr = OLD.user_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_sievescripts_owner_idnr\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_sievescripts WHERE owner_idnr = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"--\n" \
"-- store all headers by storing all headernames and headervalues in separate\n" \
"-- tables.\n" \
"--\n" \
"\n" \
"CREATE TABLE dbmail_headername (\n" \
"	id		INTEGER PRIMARY KEY,\n" \
"	headername	TEXT NOT NULL DEFAULT ''\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_headername_1 on dbmail_headername (headername);\n" \
"\n" \
"CREATE TABLE dbmail_headervalue (\n" \
" 	id		INTEGER NOT NULL PRIMARY KEY,\n" \
"	hash 		TEXT NOT NULL,\n" \
"        headervalue   	BLOB NOT NULL,\n" \
"	sortfield	TEXT NOT NULL,\n" \
"	datefield	DATETIME\n" \
");\n" \
"CREATE INDEX dbmail_headervalue_1 ON dbmail_headervalue(hash);\n" \
"CREATE INDEX dbmail_headervalue_2 ON dbmail_headervalue(sortfield);\n" \
"CREATE INDEX dbmail_headervalue_3 ON dbmail_headervalue(datefield);\n" \
"\n" \
"CREATE TABLE dbmail_header (\n" \
"        physmessage_id      INTEGER NOT NULL,\n" \
"	headername_id       INTEGER NOT NULL,\n" \
"        headervalue_id      INTEGER NOT NULL\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_header_1 ON dbmail_header(physmessage_id,headername_id,headervalue_id);\n" \
"\n" \
"CREATE TRIGGER fk_insert_header_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_header\" violates foreign key constraint \"fk_insert_header_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update_header_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_header\" violates foreign key constraint \"fk_update_header_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update2_header_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_header SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_delete_header_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_header WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_insert_header_headername_id\n" \
"	BEFORE INSERT ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.headername_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_headername WHERE id = new.headername_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_header\" violates foreign key constraint \"fk_insert_header_headername_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update_header_headername_id\n" \
"	BEFORE UPDATE ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.headername_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_headername WHERE id = new.headername_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_header\" violates foreign key constraint \"fk_update_header_headername_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update2_header_headername_id\n" \
"	AFTER UPDATE ON dbmail_headername\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_header SET headername_id = new.id WHERE headername_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_delete_header_headername_id\n" \
"	BEFORE DELETE ON dbmail_headername\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_header WHERE headername_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_insert_header_headervalue_id\n" \
"	BEFORE INSERT ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.headervalue_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_headervalue WHERE id = new.headervalue_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_header\" violates foreign key constraint \"fk_insert_header_headervalue_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update_header_headervalue_id\n" \
"	BEFORE UPDATE ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.headervalue_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_headervalue WHERE id = new.headervalue_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_header\" violates foreign key constraint \"fk_update_header_headervalue_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update2_header_headervalue_id\n" \
"	AFTER UPDATE ON dbmail_headervalue\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_header SET headervalue_id = new.id WHERE headervalue_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_delete_header_headervalue_id\n" \
"	BEFORE DELETE ON dbmail_headervalue\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_header WHERE headervalue_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"\n" \
"\n" \
"-- Threading\n" \
"\n" \
"-- support fast threading by breaking out In-Reply-To/References headers\n" \
"-- these fields contain zero or more Message-Id values that determine the message\n" \
"-- threading\n" \
"\n" \
"CREATE TABLE dbmail_referencesfield (\n" \
"        physmessage_id  INTEGER NOT NULL,\n" \
"	id		INTEGER NOT NULL PRIMARY KEY,\n" \
"	referencesfield	TEXT NOT NULL DEFAULT ''\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_referencesfield_1 on dbmail_referencesfield (physmessage_id, referencesfield);\n" \
"--	FOREIGN KEY (physmessage_id)\n" \
"--			REFERENCES dbmail_physmessage(id)\n" \
"--			ON UPDATE CASCADE ON DELETE CASCADE\n" \
"\n" \
"CREATE TRIGGER fk_insert_referencesfield_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_referencesfield\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_referencesfield\" violates foreign key constraint \"fk_insert_referencesfield_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_referencesfield_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_referencesfield\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_referencesfield\" violates foreign key constraint \"fk_update1_referencesfield_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_referencesfield_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_referencesfield SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_referencesfield_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_referencesfield WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"-- Table structure for table `dbmail_replycache`\n" \
"\n" \
"CREATE TABLE dbmail_replycache (\n" \
"  to_addr TEXT NOT NULL default '',\n" \
"  from_addr TEXT NOT NULL default '',\n" \
"  handle TEXT NOT NULL default '',\n" \
"  lastseen datetime NOT NULL default '0000-00-00 00:00:00'\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_replycache_1 on dbmail_replycache (to_addr,from_addr, handle);\n" \
"\n" \
"--\n" \
"-- Add tables and columns to hold Sieve scripts.\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_usermap (\n" \
"  login TEXT NOT NULL,\n" \
"  sock_allow TEXT NOT NULL,\n" \
"  sock_deny TEXT NOT NULL,\n" \
"  userid TEXT NOT NULL\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX usermap_idx_1 ON dbmail_usermap(login, sock_allow, userid);\n" \
"\n" \
"\n" \
"\n" \
"\n" \
"-- Create the user for the delivery chain\n" \
"INSERT INTO dbmail_users (userid, passwd, encryption_type) \n" \
"	VALUES ('__@!internal_delivery_user!@__', '', 'md5');\n" \
"-- Create the 'anyone' user which is used for ACLs.\n" \
"INSERT INTO dbmail_users (userid, passwd, encryption_type) \n" \
"	VALUES ('anyone', '', 'md5');\n" \
"-- Create the user to own #Public mailboxes\n" \
"INSERT INTO dbmail_users (userid, passwd, encryption_type) \n" \
"	VALUES ('__public__', '', 'md5');\n" \
"\n" \
"COMMIT;\n" \
"\n" \
"\n" \
"-- support faster FETCH commands by caching ENVELOPE information\n" \
"\n" \
"CREATE TABLE dbmail_envelope (\n" \
"        physmessage_id  INTEGER NOT NULL,\n" \
"	id		INTEGER NOT NULL PRIMARY KEY,\n" \
"	envelope	TEXT NOT NULL DEFAULT ''\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_envelope_1 on dbmail_envelope (physmessage_id);\n" \
"CREATE UNIQUE INDEX dbmail_envelope_2 on dbmail_envelope (physmessage_id, id);\n" \
"\n" \
"CREATE TRIGGER fk_insert_envelope_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_envelope\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_envelope\" violates foreign key constraint \"fk_insert_envelope_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_envelope_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_envelope\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_envelope\" violates foreign key constraint \"fk_update1_envelope_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_envelope_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_envelope SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_envelope_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_envelope WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"\n" \
"\n" \
"--\n" \
"-- 2.3.x additions\n" \
"--\n" \
"\n" \
"DROP TABLE IF EXISTS dbmail_mimeparts;\n" \
"CREATE TABLE dbmail_mimeparts (\n" \
"	id	INTEGER NOT NULL PRIMARY KEY,\n" \
"	hash	TEXT NOT NULL,\n" \
"	data	BLOB NOT NULL,\n" \
"	size	INTEGER NOT NULL\n" \
");\n" \
"\n" \
"CREATE INDEX dbmail_mimeparts_1 ON dbmail_mimeparts(hash);\n" \
"\n" \
"DROP TABLE IF EXISTS dbmail_partlists;\n" \
"CREATE TABLE dbmail_partlists (\n" \
"	physmessage_id	INTEGER NOT NULL,\n" \
"   	is_header 	BOOLEAN DEFAULT '0' NOT NULL,\n" \
"	part_key	INTEGER DEFAULT '0' NOT NULL,\n" \
"	part_depth	INTEGER DEFAULT '0' NOT NULL,\n" \
"	part_order	INTEGER DEFAULT '0' NOT NULL,\n" \
"	part_id		INTEGER NOT NULL\n" \
");\n" \
"\n" \
"CREATE INDEX dbmail_partlists_1 ON dbmail_partlists(physmessage_id);\n" \
"CREATE INDEX dbmail_partlists_2 ON dbmail_partlists(part_id);\n" \
"CREATE UNIQUE INDEX message_parts ON dbmail_partlists(physmessage_id, part_key, part_depth, part_order);\n" \
"\n" \
"-- ALTER TABLE ONLY dbmail_partlists\n" \
"--    ADD CONSTRAINT dbmail_partlists_part_id_fkey FOREIGN KEY (part_id) REFERENCES dbmail_mimeparts(id) ON UPDATE CASCADE ON DELETE CASCADE;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_insert_partlists_mimeparts_id;\n" \
"CREATE TRIGGER fk_insert_partlists_mimeparts_id\n" \
"	BEFORE INSERT ON dbmail_partlists\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.part_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_mimeparts WHERE id = new.part_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_partlists\" violates foreign key constraint \"fk_insert_partlists_mimeparts_id\"')\n" \
"		END;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_update_partlists_mimeparts_id;\n" \
"CREATE TRIGGER fk_update_partlists_mimeparts_id\n" \
"	BEFORE UPDATE ON dbmail_partlists\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.part_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_mimeparts WHERE id = new.part_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_partlists\" violates foreign key constraint \"fk_update_partlists_mimeparts_id\"')\n" \
"		END;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_update2_partlists_mimeparts_id;\n" \
"CREATE TRIGGER fk_update2_partlists_mimeparts_id\n" \
"	AFTER UPDATE ON dbmail_mimeparts\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_partlists SET part_id = new.id WHERE part_id = OLD.id;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_delete_partlists_mimeparts_id;\n" \
"CREATE TRIGGER fk_delete_partlists_mimeparts_id\n" \
"	BEFORE DELETE ON dbmail_mimeparts\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_partlists WHERE part_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"-- ALTER TABLE ONLY dbmail_partlists\n" \
"--    ADD CONSTRAINT dbmail_partlists_physmessage_id_fkey FOREIGN KEY (physmessage_id) REFERENCES dbmail_physmessage(id) ON UPDATE CASCADE ON DELETE CASCADE;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_insert_partlists_physmessage_id;\n" \
"CREATE TRIGGER fk_insert_partlists_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_partlists\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_partlists\" violates foreign key constraint \"fk_insert_partlists_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_update_partlists_physmessage_id;\n" \
"CREATE TRIGGER fk_update_partlists_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_partlists\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_partlists\" violates foreign key constraint \"fk_update_partlists_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_update2_partlists_physmessage_id;\n" \
"CREATE TRIGGER fk_update2_partlists_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_partlists SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_delete_partlists_physmessage_id;\n" \
"CREATE TRIGGER fk_delete_partlists_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_partlists WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TABLE dbmail_keywords (\n" \
"	keyword		TEXT NOT NULL,\n" \
"	message_idnr	INT NOT NULL\n" \
");\n" \
"CREATE UNIQUE INDEX dbmail_keywords_1 ON dbmail_keywords(keyword,message_idnr);\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_insert_dbmail_keywords_dbmail_messages_message_idnr;\n" \
"CREATE TRIGGER fk_insert_dbmail_keywords_dbmail_messages_message_idnr\n" \
"	BEFORE INSERT ON dbmail_keywords\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.message_idnr IS NOT NULL)\n" \
"				AND ((SELECT message_idnr FROM dbmail_messages WHERE message_idnr = new.message_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_keywords\" violates foreign key constraint \"fk_insert_dbmail_keywords_dbmail_messages_message_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_update_dbmail_keywords_dbmail_messages_message_idnr;\n" \
"CREATE TRIGGER fk_update_dbmail_keywords_dbmail_messages_message_idnr\n" \
"	BEFORE UPDATE ON dbmail_keywords\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.message_idnr IS NOT NULL)\n" \
"				AND ((SELECT message_idnr FROM dbmail_messages WHERE message_idnr = new.message_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_keywords\" violates foreign key constraint \"fk_update_dbmail_keywords_dbmail_messages_message_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_update2_dbmail_keywords_dbmail_messages_message_idnr;\n" \
"CREATE TRIGGER fk_update2_dbmail_keywords_dbmail_messages_message_idnr\n" \
"	AFTER UPDATE ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_keywords SET message_idnr = new.message_idnr WHERE message_idnr = OLD.message_idnr;\n" \
"	END;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_delete_dbmail_keywords_dbmail_messages_message_idnr;\n" \
"CREATE TRIGGER fk_delete_dbmail_keywords_dbmail_messages_message_idnr\n" \
"	BEFORE DELETE ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_keywords WHERE message_idnr = OLD.message_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"DROP TABLE IF EXISTS dbmail_filters;\n" \
"CREATE TABLE dbmail_filters (\n" \
"	id           INTEGER PRIMARY KEY,\n" \
"	user_id      INTEGER NOT NULL,\n" \
"	headername   TEXT NOT NULL,\n" \
"	headervalue  TEXT NOT NULL,	\n" \
"	mailbox      TEXT NOT NULL\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_filters_index_1 ON dbmail_filters(user_id, id);\n" \
"CREATE TRIGGER fk_insert_filters_users_user_idnr\n" \
"	BEFORE INSERT ON dbmail_filters\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_filters\" violates foreign key constraint \"fk_insert_filters_users_user_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update_filters_users_user_idnr\n" \
"	BEFORE UPDATE ON dbmail_filters\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_filters\" violates foreign key constraint \"fk_update_filters_users_user_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update2_filters_users_user_idnr\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_filters SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_delete_filters_users_user_idnr\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_filters WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"CREATE VIEW dbmail_fromfield AS\n" \
"        SELECT physmessage_id,sortfield AS fromfield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='from';\n" \
"\n" \
"CREATE VIEW dbmail_ccfield AS\n" \
"        SELECT physmessage_id,sortfield AS ccfield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='cc';\n" \
"\n" \
"CREATE VIEW dbmail_tofield AS\n" \
"        SELECT physmessage_id,sortfield AS tofield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='to';\n" \
"\n" \
"CREATE VIEW dbmail_subjectfield AS\n" \
"        SELECT physmessage_id,headervalue AS subjectfield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='subject';\n" \
"\n" \
"CREATE VIEW dbmail_datefield AS\n" \
"        SELECT physmessage_id,datefield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='date';\n" \
"\n" \
"\n" \
"\n"
STRIP = strip
VERSION = 3.0.2
abs_builddir = /home/skraps/Downloads/dbmail-3.0.2/man
abs_srcdir = /home/skraps/Downloads/dbmail-3.0.2/man
abs_top_builddir = /home/skraps/Downloads/dbmail-3.0.2
abs_top_srcdir = /home/skraps/Downloads/dbmail-3.0.2
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
glibconfig = /usr/bin/pkg-config
gmimeconfig = /usr/bin/pkg-config
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/skraps/Downloads/dbmail-3.0.2/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
man1_MANS = dbmail.1 dbmail-deliver.1
man5_MANS = dbmail.conf.5
man8_MANS = dbmail-util.8 \
	dbmail-users.8 \
	dbmail-export.8 \
	dbmail-sievecmd.8 \
	dbmail-imapd.8 \
	dbmail-lmtpd.8 \
	dbmail-pop3d.8 \
	dbmail-httpd.8 \
	dbmail-timsieved.8

EXTRA_DIST = $(man1_MANS) $(man5_MANS) $(man8_MANS)
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu man/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu man/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-man1: $(man1_MANS)
	@$(NORMAL_INSTALL)
	test -z "$(man1dir)" || $(MKDIR_P) "$(DESTDIR)$(man1dir)"
	@list='$(man1_MANS)'; test -n "$(man1dir)" || exit 0; \
	{ for i in $$list; do echo "$$i"; done; \
	} | while read p; do \
	  if test -f $$p; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; echo "$$p"; \
	done | \
	sed -e 'n;s,.*/,,;p;h;s,.*\.,,;s,^[^1][0-9a-z]*$$,1,;x' \
	      -e 's,\.[0-9a-z]*$$,,;$(transform);G;s,\n,.,' | \
	sed 'N;N;s,\n, ,g' | { \
	list=; while read file base inst; do \
	  if test "$$base" = "$$inst"; then list="$$list $$file"; else \
	    echo " $(INSTALL_DATA) '$$file' '$(DESTDIR)$(man1dir)/$$inst'"; \
	    $(INSTALL_DATA) "$$file" "$(DESTDIR)$(man1dir)/$$inst" || exit $$?; \
	  fi; \
	done; \
	for i in $$list; do echo "$$i"; done | $(am__base_list) | \
	while read files; do \
	  test -z "$$files" || { \
	    echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(man1dir)'"; \
	    $(INSTALL_DATA) $$files "$(DESTDIR)$(man1dir)" || exit $$?; }; \
	done; }

uninstall-man1:
	@$(NORMAL_UNINSTALL)
	@list='$(man1_MANS)'; test -n "$(man1dir)" || exit 0; \
	files=`{ for i in $$list; do echo "$$i"; done; \
	} | sed -e 's,.*/,,;h;s,.*\.,,;s,^[^1][0-9a-z]*$$,1,;x' \
	      -e 's,\.[0-9a-z]*$$,,;$(transform);G;s,\n,.,'`; \
	test -z "$$files" || { \
	  echo " ( cd '$(DESTDIR)$(man1dir)' && rm -f" $$files ")"; \
	  cd "$(DESTDIR)$(man1dir)" && rm -f $$files; }
install-man5: $(man5_MANS)
	@$(NORMAL_INSTALL)
	test -z "$(man5dir)" || $(MKDIR_P) "$(DESTDIR)$(man5dir)"
	@list='$(man5_MANS)'; test -n "$(man5dir)" || exit 0; \
	{ for i in $$list; do echo "$$i"; done; \
	} | while read p; do \
	  if test -f $$p; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; echo "$$p"; \
	done | \
	sed -e 'n;s,.*/,,;p;h;s,.*\.,,;s,^[^5][0-9a-z]*$$,5,;x' \
	      -e 's,\.[0-9a-z]*$$,,;$(transform);G;s,\n,.,' | \
	sed 'N;N;s,\n, ,g' | { \
	list=; while read file base inst; do \
	  if test "$$base" = "$$inst"; then list="$$list $$file"; else \
	    echo " $(INSTALL_DATA) '$$file' '$(DESTDIR)$(man5dir)/$$inst'"; \
	    $(INSTALL_DATA) "$$file" "$(DESTDIR)$(man5dir)/$$inst" || exit $$?; \
	  fi; \
	done; \
	for i in $$list; do echo "$$i"; done | $(am__base_list) | \
	while read files; do \
	  test -z "$$files" || { \
	    echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(man5dir)'"; \
	    $(INSTALL_DATA) $$files "$(DESTDIR)$(man5dir)" || exit $$?; }; \
	done; }

uninstall-man5:
	@$(NORMAL_UNINSTALL)
	@list='$(man5_MANS)'; test -n "$(man5dir)" || exit 0; \
	files=`{ for i in $$list; do echo "$$i"; done; \
	} | sed -e 's,.*/,,;h;s,.*\.,,;s,^[^5][0-9a-z]*$$,5,;x' \
	      -e 's,\.[0-9a-z]*$$,,;$(transform);G;s,\n,.,'`; \
	test -z "$$files" || { \
	  echo " ( cd '$(DESTDIR)$(man5dir)' && rm -f" $$files ")"; \
	  cd "$(DESTDIR)$(man5dir)" && rm -f $$files; }
install-man8: $(man8_MANS)
	@$(NORMAL_INSTALL)
	test -z "$(man8dir)" || $(MKDIR_P) "$(DESTDIR)$(man8dir)"
	@list='$(man8_MANS)'; test -n "$(man8dir)" || exit 0; \
	{ for i in $$list; do echo "$$i"; done; \
	} | while read p; do \
	  if test -f $$p; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; echo "$$p"; \
	done | \
	sed -e 'n;s,.*/,,;p;h;s,.*\.,,;s,^[^8][0-9a-z]*$$,8,;x' \
	      -e 's,\.[0-9a-z]*$$,,;$(transform);G;s,\n,.,' | \
	sed 'N;N;s,\n, ,g' | { \
	list=; while read file base inst; do \
	  if test "$$base" = "$$inst"; then list="$$list $$file"; else \
	    echo " $(INSTALL_DATA) '$$file' '$(DESTDIR)$(man8dir)/$$inst'"; \
	    $(INSTALL_DATA) "$$file" "$(DESTDIR)$(man8dir)/$$inst" || exit $$?; \
	  fi; \
	done; \
	for i in $$list; do echo "$$i"; done | $(am__base_list) | \
	while read files; do \
	  test -z "$$files" || { \
	    echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(man8dir)'"; \
	    $(INSTALL_DATA) $$files "$(DESTDIR)$(man8dir)" || exit $$?; }; \
	done; }

uninstall-man8:
	@$(NORMAL_UNINSTALL)
	@list='$(man8_MANS)'; test -n "$(man8dir)" || exit 0; \
	files=`{ for i in $$list; do echo "$$i"; done; \
	} | sed -e 's,.*/,,;h;s,.*\.,,;s,^[^8][0-9a-z]*$$,8,;x' \
	      -e 's,\.[0-9a-z]*$$,,;$(transform);G;s,\n,.,'`; \
	test -z "$$files" || { \
	  echo " ( cd '$(DESTDIR)$(man8dir)' && rm -f" $$files ")"; \
	  cd "$(DESTDIR)$(man8dir)" && rm -f $$files; }
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	@list='$(MANS)'; if test -n "$$list"; then \
	  list=`for p in $$list; do \
	    if test -f $$p; then d=; else d="$(srcdir)/"; fi; \
	    if test -f "$$d$$p"; then echo "$$d$$p"; else :; fi; done`; \
	  if test -n "$$list" && \
	    grep 'ab help2man is required to generate this page' $$list >/dev/null; then \
	    echo "error: found man pages containing the \`missing help2man' replacement text:" >&2; \
	    grep -l 'ab help2man is required to generate this page' $$list | sed 's/^/         /' >&2; \
	    echo "       to fix them, install help2man, remove and regenerate the man pages;" >&2; \
	    echo "       typically \`make maintainer-clean' will remove them" >&2; \
	    exit 1; \
	  else :; fi; \
	else :; fi
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(MANS)
installdirs:
	for dir in "$(DESTDIR)$(man1dir)" "$(DESTDIR)$(man5dir)" "$(DESTDIR)$(man8dir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean-am: clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-man

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man: install-man1 install-man5 install-man8

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-man

uninstall-man: uninstall-man1 uninstall-man5 uninstall-man8

.MAKE: install-am install-strip

.PHONY: all all-am check check-am clean clean-generic clean-libtool \
	distclean distclean-generic distclean-libtool distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-man1 \
	install-man5 install-man8 install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic \
	mostlyclean-libtool pdf pdf-am ps ps-am uninstall uninstall-am \
	uninstall-man uninstall-man1 uninstall-man5 uninstall-man8


%.html : %.txt 
	asciidoc --unsafe -b xhtml11 -d manpage $<

%.xml : %.txt
	asciidoc --unsafe -b docbook -d manpage $<

%.1 : %.xml
	xmlto man $< 2>/dev/null
	./fixsp.pl $@

%.5 : %.xml
	xmlto man $< 2>/dev/null
	./fixsp.pl $@

%.8 : %.xml
	xmlto man $< 2>/dev/null
	./fixsp.pl $@

clean:
	rm -f *1 *5 *8 *xml *html

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
