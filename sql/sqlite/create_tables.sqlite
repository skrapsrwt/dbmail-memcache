-- Copyright (C) 2005 Internet Connection, Inc.
-- Copyright (C) 2006-2010 NFG Net Facilities Group BV.
--
-- This program is free software; you can redistribute it and/or 
-- modify it under the terms of the GNU General Public License 
-- as published by the Free Software Foundation; either 
-- version 2 of the License, or (at your option) any later 
-- version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-- 

BEGIN TRANSACTION;

PRAGMA auto_vacuum = 1;

CREATE TABLE dbmail_aliases (
   alias_idnr INTEGER PRIMARY KEY,
   alias TEXT NOT NULL,
   deliver_to TEXT NOT NULL,
   client_idnr INTEGER DEFAULT '0' NOT NULL
);
CREATE INDEX dbmail_aliases_index_1 ON dbmail_aliases(alias);
CREATE INDEX dbmail_aliases_index_2 ON dbmail_aliases(client_idnr);

CREATE TABLE dbmail_authlog (
  id INTEGER PRIMARY KEY,
  userid TEXT,
  service TEXT,
  login_time DATETIME,
  logout_time DATETIME,
  src_ip TEXT,
  src_port INTEGER,
  dst_ip TEXT,
  dst_port INTEGER,
  status TEXT DEFAULT 'active',
  bytes_rx INTEGER DEFAULT '0' NOT NULL,
  bytes_tx INTEGER DEFAULT '0' NOT NULL
);

CREATE TABLE dbmail_users (
   user_idnr INTEGER PRIMARY KEY,
   userid TEXT NOT NULL,
   passwd TEXT NOT NULL,
   client_idnr INTEGER DEFAULT '0' NOT NULL,
   maxmail_size INTEGER DEFAULT '0' NOT NULL,
   curmail_size INTEGER DEFAULT '0' NOT NULL,
   encryption_type TEXT DEFAULT '' NOT NULL,
   last_login DATETIME DEFAULT '1979-11-03 22:05:58' NOT NULL
);
CREATE UNIQUE INDEX dbmail_users_1 ON dbmail_users(userid);

CREATE TABLE dbmail_mailboxes (
   mailbox_idnr INTEGER PRIMARY KEY,
   owner_idnr INTEGER DEFAULT '0' NOT NULL,
   name TEXT BINARY NOT NULL,
   seq INTEGER DEFAULT '0' NOT NULL,
   seen_flag BOOLEAN default '0' not null,
   answered_flag BOOLEAN default '0' not null,
   deleted_flag BOOLEAN default '0' not null,
   flagged_flag BOOLEAN default '0' not null,
   recent_flag BOOLEAN default '0' not null,
   draft_flag BOOLEAN default '0' not null,
   no_inferiors BOOLEAN default '0' not null,
   no_select BOOLEAN default '0' not null,
   permission BOOLEAN default '2'
);
CREATE INDEX dbmail_mailboxes_1 ON dbmail_mailboxes(name);
CREATE INDEX dbmail_mailboxes_2 ON dbmail_mailboxes(owner_idnr);
CREATE UNIQUE INDEX dbmail_mailboxes_3 ON dbmail_mailboxes(owner_idnr,name);
CREATE INDEX dbmail_mailbox_4 ON dbmail_mailboxes(seq);

CREATE TRIGGER fk_insert_mailboxes_users_idnr
	BEFORE INSERT ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.owner_idnr IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_mailboxes" violates foreign key constraint "fk_insert_mailboxes_users_idnr"')
		END;
	END;
CREATE TRIGGER fk_update1_mailboxes_users_idnr
	BEFORE UPDATE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.owner_idnr IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_mailboxes" violates foreign key constraint "fk_update2_mailboxes_users_idnr"')
		END;
	END;
CREATE TRIGGER fk_update2_mailboxes_users_idnr
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_mailboxes SET owner_idnr = new.user_idnr WHERE owner_idnr = OLD.user_idnr;
	END;
CREATE TRIGGER fk_delete_mailboxes_users_idnr
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_mailboxes WHERE owner_idnr = OLD.user_idnr;
	END;


CREATE TABLE dbmail_subscription (
	user_id INTEGER NOT NULL,
	mailbox_id INTEGER NOT NULL
);
CREATE UNIQUE INDEX dbmail_subscriptioin_1 ON dbmail_subscription(user_id, mailbox_id);

CREATE TRIGGER fk_insert_subscription_users_idnr
	BEFORE INSERT ON dbmail_subscription
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_subscription" violates foreign key constraint "fk_insert_subscription_users_idnr"')
		END;
	END;
CREATE TRIGGER fk_update1_subscription_users_idnr
	BEFORE UPDATE ON dbmail_subscription
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_subscription" violates foreign key constraint "fk_update1_subscription_users_idnr"')
		END;
	END;
CREATE TRIGGER fk_update2_subscription_users_idnr
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_subscription SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;
	END;
CREATE TRIGGER fk_delete_subscription_users_idnr
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_subscription WHERE user_id = OLD.user_idnr;
	END;

CREATE TRIGGER fk_insert_subscription_mailbox_id
	BEFORE INSERT ON dbmail_subscription
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_id IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_subscription" violates foreign key constraint "fk_insert_subscription_mailbox_id"')
		END;
	END;
CREATE TRIGGER fk_update1_subscription_mailbox_id
	BEFORE UPDATE ON dbmail_subscription
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_id IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_subscription" violates foreign key constraint "fk_update1_subscription_mailbox_id"')
		END;
	END;
CREATE TRIGGER fk_update2_subscription_mailbox_id
	AFTER UPDATE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		UPDATE dbmail_subscription SET mailbox_id = new.mailbox_idnr WHERE mailbox_id = OLD.mailbox_idnr;
	END;
CREATE TRIGGER fk_delete_subscription_mailbox_id
	BEFORE DELETE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_subscription WHERE mailbox_id = OLD.mailbox_idnr;
	END;


CREATE TABLE dbmail_acl (
	user_id INTEGER NOT NULL,
	mailbox_id INTEGER NOT NULL,
	lookup_flag BOOLEAN default '0' not null,
	read_flag BOOLEAN default '0' not null,
	seen_flag BOOLEAN default '0' not null,
	write_flag BOOLEAN default '0' not null,
	insert_flag BOOLEAN default '0' not null,	
	post_flag BOOLEAN default '0' not null,
	create_flag BOOLEAN default '0' not null,	
	delete_flag BOOLEAN default '0' not null,	
	deleted_flag BOOLEAN default '0' not null,	
	expunge_flag BOOLEAN default '0' not null,	
	administer_flag BOOLEAN default '0' not null
);
CREATE INDEX dbmail_acl_1 ON dbmail_acl(user_id);
CREATE INDEX dbmail_acl_2 ON dbmail_acl(mailbox_id);
CREATE UNIQUE INDEX dbmail_acl_3 ON dbmail_acl(user_id, mailbox_id);

CREATE TRIGGER fk_insert_acl_user_id
	BEFORE INSERT ON dbmail_acl
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_acl" violates foreign key constraint "fk_insert_acl_user_id"')
		END;
	END;
CREATE TRIGGER fk_update1_acl_user_id
	BEFORE UPDATE ON dbmail_acl
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_acl" violates foreign key constraint "fk_update1_acl_user_id"')
		END;
	END;
CREATE TRIGGER fk_update2_acl_user_id
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_acl SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;
	END;
CREATE TRIGGER fk_delete_acl_user_id
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_acl WHERE user_id = OLD.user_idnr;
	END;

CREATE TRIGGER fk_insert_acl_mailbox_id
	BEFORE INSERT ON dbmail_acl
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_id IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_acl" violates foreign key constraint "fk_insert_acl_mailbox_id"')
		END;
	END;
CREATE TRIGGER fk_update1_acl_mailbox_id
	BEFORE UPDATE ON dbmail_acl
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_id IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_acl" violates foreign key constraint "fk_update1_acl_mailbox_id"')
		END;
	END;
CREATE TRIGGER fk_update2_acl_mailbox_id
	AFTER UPDATE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		UPDATE dbmail_acl SET mailbox_id = new.mailbox_idnr WHERE mailbox_id = OLD.mailbox_idnr;
	END;
CREATE TRIGGER fk_delete_acl_mailbox_id
	BEFORE DELETE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_acl WHERE mailbox_id = OLD.mailbox_idnr;
	END;



CREATE TABLE dbmail_physmessage (
   id INTEGER PRIMARY KEY,
   messagesize INTEGER DEFAULT '0' NOT NULL,
   rfcsize INTEGER DEFAULT '0' NOT NULL,
   internal_date DATETIME default '0' not null
);
 
CREATE TABLE dbmail_messages (
   message_idnr INTEGER PRIMARY KEY,
   mailbox_idnr INTEGER DEFAULT '0' NOT NULL,
   physmessage_id INTEGER DEFAULT '0' NOT NULL,
   seen_flag BOOLEAN default '0' not null,
   answered_flag BOOLEAN default '0' not null,
   deleted_flag BOOLEAN default '0' not null,
   flagged_flag BOOLEAN default '0' not null,
   recent_flag BOOLEAN default '0' not null,
   draft_flag BOOLEAN default '0' not null,
   unique_id TEXT NOT NULL,
   status BOOLEAN unsigned default '0' not null
);
CREATE INDEX dbmail_messages_1 ON dbmail_messages(mailbox_idnr);
CREATE INDEX dbmail_messages_2 ON dbmail_messages(physmessage_id);
CREATE INDEX dbmail_messages_3 ON dbmail_messages(seen_flag);
CREATE INDEX dbmail_messages_4 ON dbmail_messages(unique_id);
CREATE INDEX dbmail_messages_5 ON dbmail_messages(status);
CREATE INDEX dbmail_messages_6 ON dbmail_messages(mailbox_idnr,status);
CREATE INDEX dbmail_messages_7 ON dbmail_messages(mailbox_idnr,status,seen_flag);
CREATE INDEX dbmail_messages_8 ON dbmail_messages(mailbox_idnr,status,recent_flag);

CREATE TRIGGER fk_insert_messages_physmessage_id
	BEFORE INSERT ON dbmail_messages
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_messages" violates foreign key constraint "fk_insert_messages_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update1_messages_physmessage_id
	BEFORE UPDATE ON dbmail_messages
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_messages" violates foreign key constraint "fk_update1_messages_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update2_messages_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_messages SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_message_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_messages WHERE physmessage_id = OLD.id;
	END;


CREATE TRIGGER fk_insert_messages_mailbox_idnr
	BEFORE INSERT ON dbmail_messages
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_idnr IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_idnr) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_messages" violates foreign key constraint "fk_insert_messages_mailbox_idnr"')
		END;
	END;
CREATE TRIGGER fk_update1_messages_mailbox_idnr
	BEFORE UPDATE ON dbmail_messages
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_idnr IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_idnr) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_messages" violates foreign key constraint "fk_update1_messages_mailbox_idnr"')
		END;
	END;
CREATE TRIGGER fk_update2_messages_mailbox_idnr
	AFTER UPDATE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		UPDATE dbmail_messages SET mailbox_idnr = new.mailbox_idnr WHERE mailbox_idnr = OLD.mailbox_idnr;
	END;
CREATE TRIGGER fk_delete_messages_mailbox_idnr
	BEFORE DELETE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_messages WHERE mailbox_idnr = OLD.mailbox_idnr;
	END;


   
CREATE TABLE dbmail_messageblks (
   messageblk_idnr INTEGER PRIMARY KEY,
   physmessage_id INTEGER DEFAULT '0' NOT NULL,
   messageblk TEXT NOT NULL,
   blocksize INTEGER DEFAULT '0' NOT NULL,
   is_header BOOLEAN DEFAULT '0' NOT NULL
);
CREATE INDEX dbmail_messageblks_1 ON dbmail_messageblks(physmessage_id);
CREATE INDEX dbmail_messageblks_2 ON dbmail_messageblks(physmessage_id, is_header);

CREATE TRIGGER fk_insert_messageblks_physmessage_id
	BEFORE INSERT ON dbmail_messageblks
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_messageblks" violates foreign key constraint "fk_insert_messageblks_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update1_messageblks_physmessage_id
	BEFORE UPDATE ON dbmail_messageblks
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_messageblks" violates foreign key constraint "fk_update1_messageblks_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update2_messageblks_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_messageblks SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_messageblks_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_messageblks WHERE physmessage_id = OLD.id;
	END;

 
CREATE TABLE dbmail_auto_replies (
   user_idnr INTEGER PRIMARY KEY,
   reply_body TEXT,  
   start_date DATETIME DEFAULT '1980-01-01 22:05:58' NOT NULL,
   stop_date DATETIME DEFAULT '1980-01-01 22:05:58' NOT NULL
);                   
CREATE TRIGGER fk_insert_auto_replies_user_idnr
        BEFORE INSERT ON dbmail_auto_replies
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.user_idnr IS NOT NULL)
                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "dbmail_auto_replies" violates foreign key constraint "fk_insert_auto_replies_user_idnr"')
                END; 
        END;         
CREATE TRIGGER fk_update1_auto_replies_user_idnr
        BEFORE UPDATE ON dbmail_auto_replies
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.user_idnr IS NOT NULL)
                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)
                        THEN RAISE (ABORT, 'update on table "dbmail_auto_replies" violates foreign key constraint "fk_update1_auto_replies_user_idnr"')
                END; 
        END;         
CREATE TRIGGER fk_update2_auto_replies_user_idnr
        AFTER UPDATE ON dbmail_users
        FOR EACH ROW BEGIN
                UPDATE dbmail_auto_replies SET user_idnr = new.user_idnr WHERE user_idnr = OLD.user_idnr;
        END;         
CREATE TRIGGER fk_delete_auto_replies_user_idnr
        BEFORE DELETE ON dbmail_users
        FOR EACH ROW BEGIN
                DELETE FROM dbmail_auto_replies WHERE user_idnr = OLD.user_idnr;
        END;         
                     
CREATE TABLE dbmail_auto_notifications (
   user_idnr INTEGER PRIMARY KEY,
   notify_address TEXT  
);                   

CREATE TRIGGER fk_insert_auto_notifications_user_idnr
        BEFORE INSERT ON dbmail_auto_notifications
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.user_idnr IS NOT NULL)
                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "dbmail_auto_notifications" violates foreign key constraint "fk_insert_auto_notifications_user_idnr"')
                END; 
        END;         
CREATE TRIGGER fk_update1_auto_notifications_user_idnr
        BEFORE UPDATE ON dbmail_auto_notifications
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.user_idnr IS NOT NULL)
                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)
                        THEN RAISE (ABORT, 'update on table "dbmail_auto_notifications" violates foreign key constraint "fk_update1_auto_notifications_user_idnr"')
                END; 
        END;         
CREATE TRIGGER fk_update2_auto_notifications_user_idnr
        AFTER UPDATE ON dbmail_users
        FOR EACH ROW BEGIN
                UPDATE dbmail_auto_notifications SET user_idnr = new.user_idnr WHERE user_idnr = OLD.user_idnr;
        END;         
CREATE TRIGGER fk_delete_auto_notifications_user_idnr
        BEFORE DELETE ON dbmail_users
        FOR EACH ROW BEGIN
                DELETE FROM dbmail_auto_notifications WHERE user_idnr = OLD.user_idnr;
        END;         
                     




CREATE TABLE dbmail_pbsp (
   idnr INTEGER PRIMARY KEY,
   since DATETIME default '0' not null,
   ipnumber TEXT NOT NULL
);
CREATE UNIQUE INDEX dbmail_pbsp_1 ON dbmail_pbsp(ipnumber);
CREATE INDEX dbmail_pbsp_2 ON dbmail_pbsp(since);

CREATE TABLE dbmail_sievescripts (
  owner_idnr INTEGER DEFAULT '0' NOT NULL,
  name TEXT NOT NULL,
  script TEXT,
  active BOOLEAN default '0' not null
);
CREATE INDEX dbmail_sievescripts_1 ON dbmail_sievescripts(name);
CREATE INDEX dbmail_sievescripts_2 ON dbmail_sievescripts(owner_idnr);
CREATE UNIQUE INDEX dbmail_sievescripts_3 ON dbmail_sievescripts(owner_idnr,name);

CREATE TRIGGER fk_insert_sievescripts_owner_idnr
	BEFORE INSERT ON dbmail_sievescripts
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.owner_idnr IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_sievescripts" violates foreign key constraint "fk_insert_sievescripts_owner_idnr"')
		END;
	END;
CREATE TRIGGER fk_update1_sievescripts_owner_idnr
	BEFORE UPDATE ON dbmail_sievescripts
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.owner_idnr IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_sievescripts" violates foreign key constraint "fk_update1_sievescripts_owner_idnr"')
		END;
	END;
CREATE TRIGGER fk_update2_sievescripts_owner_idnr
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_sievescripts SET owner_idnr = new.user_idnr WHERE owner_idnr = OLD.user_idnr;
	END;
CREATE TRIGGER fk_delete_sievescripts_owner_idnr
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_sievescripts WHERE owner_idnr = OLD.user_idnr;
	END;


--
-- store all headers by storing all headernames and headervalues in separate
-- tables.
--

CREATE TABLE dbmail_headername (
	id		INTEGER PRIMARY KEY,
	headername	TEXT NOT NULL DEFAULT ''
);

CREATE UNIQUE INDEX dbmail_headername_1 on dbmail_headername (headername);

CREATE TABLE dbmail_headervalue (
 	id		INTEGER NOT NULL PRIMARY KEY,
	hash 		TEXT NOT NULL,
        headervalue   	BLOB NOT NULL,
	sortfield	TEXT NOT NULL,
	datefield	DATETIME
);
CREATE INDEX dbmail_headervalue_1 ON dbmail_headervalue(hash);
CREATE INDEX dbmail_headervalue_2 ON dbmail_headervalue(sortfield);
CREATE INDEX dbmail_headervalue_3 ON dbmail_headervalue(datefield);

CREATE TABLE dbmail_header (
        physmessage_id      INTEGER NOT NULL,
	headername_id       INTEGER NOT NULL,
        headervalue_id      INTEGER NOT NULL
);

CREATE UNIQUE INDEX dbmail_header_1 ON dbmail_header(physmessage_id,headername_id,headervalue_id);

CREATE TRIGGER fk_insert_header_physmessage_id
	BEFORE INSERT ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_header" violates foreign key constraint "fk_insert_header_physmessage_id"')
		END;
	END;

CREATE TRIGGER fk_update_header_physmessage_id
	BEFORE UPDATE ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_header" violates foreign key constraint "fk_update_header_physmessage_id"')
		END;
	END;

CREATE TRIGGER fk_update2_header_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_header SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;

CREATE TRIGGER fk_delete_header_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_header WHERE physmessage_id = OLD.id;
	END;

CREATE TRIGGER fk_insert_header_headername_id
	BEFORE INSERT ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.headername_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_headername WHERE id = new.headername_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_header" violates foreign key constraint "fk_insert_header_headername_id"')
		END;
	END;

CREATE TRIGGER fk_update_header_headername_id
	BEFORE UPDATE ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.headername_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_headername WHERE id = new.headername_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_header" violates foreign key constraint "fk_update_header_headername_id"')
		END;
	END;

CREATE TRIGGER fk_update2_header_headername_id
	AFTER UPDATE ON dbmail_headername
	FOR EACH ROW BEGIN
		UPDATE dbmail_header SET headername_id = new.id WHERE headername_id = OLD.id;
	END;

CREATE TRIGGER fk_delete_header_headername_id
	BEFORE DELETE ON dbmail_headername
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_header WHERE headername_id = OLD.id;
	END;

CREATE TRIGGER fk_insert_header_headervalue_id
	BEFORE INSERT ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.headervalue_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_headervalue WHERE id = new.headervalue_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_header" violates foreign key constraint "fk_insert_header_headervalue_id"')
		END;
	END;

CREATE TRIGGER fk_update_header_headervalue_id
	BEFORE UPDATE ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.headervalue_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_headervalue WHERE id = new.headervalue_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_header" violates foreign key constraint "fk_update_header_headervalue_id"')
		END;
	END;

CREATE TRIGGER fk_update2_header_headervalue_id
	AFTER UPDATE ON dbmail_headervalue
	FOR EACH ROW BEGIN
		UPDATE dbmail_header SET headervalue_id = new.id WHERE headervalue_id = OLD.id;
	END;

CREATE TRIGGER fk_delete_header_headervalue_id
	BEFORE DELETE ON dbmail_headervalue
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_header WHERE headervalue_id = OLD.id;
	END;



-- Threading

-- support fast threading by breaking out In-Reply-To/References headers
-- these fields contain zero or more Message-Id values that determine the message
-- threading

CREATE TABLE dbmail_referencesfield (
        physmessage_id  INTEGER NOT NULL,
	id		INTEGER NOT NULL PRIMARY KEY,
	referencesfield	TEXT NOT NULL DEFAULT ''
);

CREATE UNIQUE INDEX dbmail_referencesfield_1 on dbmail_referencesfield (physmessage_id, referencesfield);
--	FOREIGN KEY (physmessage_id)
--			REFERENCES dbmail_physmessage(id)
--			ON UPDATE CASCADE ON DELETE CASCADE

CREATE TRIGGER fk_insert_referencesfield_physmessage_id
	BEFORE INSERT ON dbmail_referencesfield
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_referencesfield" violates foreign key constraint "fk_insert_referencesfield_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update1_referencesfield_physmessage_id
	BEFORE UPDATE ON dbmail_referencesfield
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_referencesfield" violates foreign key constraint "fk_update1_referencesfield_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update2_referencesfield_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_referencesfield SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_referencesfield_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_referencesfield WHERE physmessage_id = OLD.id;
	END;

-- Table structure for table `dbmail_replycache`

CREATE TABLE dbmail_replycache (
  to_addr TEXT NOT NULL default '',
  from_addr TEXT NOT NULL default '',
  handle TEXT NOT NULL default '',
  lastseen datetime NOT NULL default '0000-00-00 00:00:00'
);

CREATE UNIQUE INDEX dbmail_replycache_1 on dbmail_replycache (to_addr,from_addr, handle);

--
-- Add tables and columns to hold Sieve scripts.


CREATE TABLE dbmail_usermap (
  login TEXT NOT NULL,
  sock_allow TEXT NOT NULL,
  sock_deny TEXT NOT NULL,
  userid TEXT NOT NULL
);

CREATE UNIQUE INDEX usermap_idx_1 ON dbmail_usermap(login, sock_allow, userid);




-- Create the user for the delivery chain
INSERT INTO dbmail_users (userid, passwd, encryption_type) 
	VALUES ('__@!internal_delivery_user!@__', '', 'md5');
-- Create the 'anyone' user which is used for ACLs.
INSERT INTO dbmail_users (userid, passwd, encryption_type) 
	VALUES ('anyone', '', 'md5');
-- Create the user to own #Public mailboxes
INSERT INTO dbmail_users (userid, passwd, encryption_type) 
	VALUES ('__public__', '', 'md5');

COMMIT;


-- support faster FETCH commands by caching ENVELOPE information

CREATE TABLE dbmail_envelope (
        physmessage_id  INTEGER NOT NULL,
	id		INTEGER NOT NULL PRIMARY KEY,
	envelope	TEXT NOT NULL DEFAULT ''
);

CREATE UNIQUE INDEX dbmail_envelope_1 on dbmail_envelope (physmessage_id);
CREATE UNIQUE INDEX dbmail_envelope_2 on dbmail_envelope (physmessage_id, id);

CREATE TRIGGER fk_insert_envelope_physmessage_id
	BEFORE INSERT ON dbmail_envelope
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_envelope" violates foreign key constraint "fk_insert_envelope_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update1_envelope_physmessage_id
	BEFORE UPDATE ON dbmail_envelope
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_envelope" violates foreign key constraint "fk_update1_envelope_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update2_envelope_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_envelope SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_envelope_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_envelope WHERE physmessage_id = OLD.id;
	END;



--
-- 2.3.x additions
--

DROP TABLE IF EXISTS dbmail_mimeparts;
CREATE TABLE dbmail_mimeparts (
	id	INTEGER NOT NULL PRIMARY KEY,
	hash	TEXT NOT NULL,
	data	BLOB NOT NULL,
	size	INTEGER NOT NULL
);

CREATE INDEX dbmail_mimeparts_1 ON dbmail_mimeparts(hash);

DROP TABLE IF EXISTS dbmail_partlists;
CREATE TABLE dbmail_partlists (
	physmessage_id	INTEGER NOT NULL,
   	is_header 	BOOLEAN DEFAULT '0' NOT NULL,
	part_key	INTEGER DEFAULT '0' NOT NULL,
	part_depth	INTEGER DEFAULT '0' NOT NULL,
	part_order	INTEGER DEFAULT '0' NOT NULL,
	part_id		INTEGER NOT NULL
);

CREATE INDEX dbmail_partlists_1 ON dbmail_partlists(physmessage_id);
CREATE INDEX dbmail_partlists_2 ON dbmail_partlists(part_id);
CREATE UNIQUE INDEX message_parts ON dbmail_partlists(physmessage_id, part_key, part_depth, part_order);

-- ALTER TABLE ONLY dbmail_partlists
--    ADD CONSTRAINT dbmail_partlists_part_id_fkey FOREIGN KEY (part_id) REFERENCES dbmail_mimeparts(id) ON UPDATE CASCADE ON DELETE CASCADE;

DROP TRIGGER IF EXISTS fk_insert_partlists_mimeparts_id;
CREATE TRIGGER fk_insert_partlists_mimeparts_id
	BEFORE INSERT ON dbmail_partlists
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.part_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_mimeparts WHERE id = new.part_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_partlists" violates foreign key constraint "fk_insert_partlists_mimeparts_id"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update_partlists_mimeparts_id;
CREATE TRIGGER fk_update_partlists_mimeparts_id
	BEFORE UPDATE ON dbmail_partlists
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.part_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_mimeparts WHERE id = new.part_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_partlists" violates foreign key constraint "fk_update_partlists_mimeparts_id"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update2_partlists_mimeparts_id;
CREATE TRIGGER fk_update2_partlists_mimeparts_id
	AFTER UPDATE ON dbmail_mimeparts
	FOR EACH ROW BEGIN
		UPDATE dbmail_partlists SET part_id = new.id WHERE part_id = OLD.id;
	END;
DROP TRIGGER IF EXISTS fk_delete_partlists_mimeparts_id;
CREATE TRIGGER fk_delete_partlists_mimeparts_id
	BEFORE DELETE ON dbmail_mimeparts
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_partlists WHERE part_id = OLD.id;
	END;

-- ALTER TABLE ONLY dbmail_partlists
--    ADD CONSTRAINT dbmail_partlists_physmessage_id_fkey FOREIGN KEY (physmessage_id) REFERENCES dbmail_physmessage(id) ON UPDATE CASCADE ON DELETE CASCADE;

DROP TRIGGER IF EXISTS fk_insert_partlists_physmessage_id;
CREATE TRIGGER fk_insert_partlists_physmessage_id
	BEFORE INSERT ON dbmail_partlists
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_partlists" violates foreign key constraint "fk_insert_partlists_physmessage_id"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update_partlists_physmessage_id;
CREATE TRIGGER fk_update_partlists_physmessage_id
	BEFORE UPDATE ON dbmail_partlists
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_partlists" violates foreign key constraint "fk_update_partlists_physmessage_id"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update2_partlists_physmessage_id;
CREATE TRIGGER fk_update2_partlists_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_partlists SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
DROP TRIGGER IF EXISTS fk_delete_partlists_physmessage_id;
CREATE TRIGGER fk_delete_partlists_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_partlists WHERE physmessage_id = OLD.id;
	END;

CREATE TABLE dbmail_keywords (
	keyword		TEXT NOT NULL,
	message_idnr	INT NOT NULL
);
CREATE UNIQUE INDEX dbmail_keywords_1 ON dbmail_keywords(keyword,message_idnr);

DROP TRIGGER IF EXISTS fk_insert_dbmail_keywords_dbmail_messages_message_idnr;
CREATE TRIGGER fk_insert_dbmail_keywords_dbmail_messages_message_idnr
	BEFORE INSERT ON dbmail_keywords
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.message_idnr IS NOT NULL)
				AND ((SELECT message_idnr FROM dbmail_messages WHERE message_idnr = new.message_idnr) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_keywords" violates foreign key constraint "fk_insert_dbmail_keywords_dbmail_messages_message_idnr"')
		END;
	END;

DROP TRIGGER IF EXISTS fk_update_dbmail_keywords_dbmail_messages_message_idnr;
CREATE TRIGGER fk_update_dbmail_keywords_dbmail_messages_message_idnr
	BEFORE UPDATE ON dbmail_keywords
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.message_idnr IS NOT NULL)
				AND ((SELECT message_idnr FROM dbmail_messages WHERE message_idnr = new.message_idnr) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_keywords" violates foreign key constraint "fk_update_dbmail_keywords_dbmail_messages_message_idnr"')
		END;
	END;

DROP TRIGGER IF EXISTS fk_update2_dbmail_keywords_dbmail_messages_message_idnr;
CREATE TRIGGER fk_update2_dbmail_keywords_dbmail_messages_message_idnr
	AFTER UPDATE ON dbmail_messages
	FOR EACH ROW BEGIN
		UPDATE dbmail_keywords SET message_idnr = new.message_idnr WHERE message_idnr = OLD.message_idnr;
	END;

DROP TRIGGER IF EXISTS fk_delete_dbmail_keywords_dbmail_messages_message_idnr;
CREATE TRIGGER fk_delete_dbmail_keywords_dbmail_messages_message_idnr
	BEFORE DELETE ON dbmail_messages
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_keywords WHERE message_idnr = OLD.message_idnr;
	END;


DROP TABLE IF EXISTS dbmail_filters;
CREATE TABLE dbmail_filters (
	id           INTEGER PRIMARY KEY,
	user_id      INTEGER NOT NULL,
	headername   TEXT NOT NULL,
	headervalue  TEXT NOT NULL,	
	mailbox      TEXT NOT NULL
);

CREATE UNIQUE INDEX dbmail_filters_index_1 ON dbmail_filters(user_id, id);
CREATE TRIGGER fk_insert_filters_users_user_idnr
	BEFORE INSERT ON dbmail_filters
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_filters" violates foreign key constraint "fk_insert_filters_users_user_idnr"')
		END;
	END;

CREATE TRIGGER fk_update_filters_users_user_idnr
	BEFORE UPDATE ON dbmail_filters
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_filters" violates foreign key constraint "fk_update_filters_users_user_idnr"')
		END;
	END;

CREATE TRIGGER fk_update2_filters_users_user_idnr
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_filters SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;
	END;

CREATE TRIGGER fk_delete_filters_users_user_idnr
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_filters WHERE user_id = OLD.user_idnr;
	END;

CREATE VIEW dbmail_fromfield AS
        SELECT physmessage_id,sortfield AS fromfield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='from';

CREATE VIEW dbmail_ccfield AS
        SELECT physmessage_id,sortfield AS ccfield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='cc';

CREATE VIEW dbmail_tofield AS
        SELECT physmessage_id,sortfield AS tofield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='to';

CREATE VIEW dbmail_subjectfield AS
        SELECT physmessage_id,headervalue AS subjectfield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='subject';

CREATE VIEW dbmail_datefield AS
        SELECT physmessage_id,datefield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='date';



