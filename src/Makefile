# Makefile.in generated by automake 1.11.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Copyright (C) 1999-2004 IC & S  dbmail@ic-s.nl
# Copyright (c) 2004-2011 NFG Net Facilities Group BV support@nfg.nl
#
# This program is free software; you can redistribute it and/or 
# modify it under the terms of the GNU General Public License 
# as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later 
# version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



pkgdatadir = $(datadir)/dbmail
pkgincludedir = $(includedir)/dbmail
pkglibdir = $(libdir)/dbmail
pkglibexecdir = $(libexecdir)/dbmail
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
sbin_PROGRAMS = dbmail-deliver$(EXEEXT) dbmail-pop3d$(EXEEXT) \
	dbmail-imapd$(EXEEXT) dbmail-util$(EXEEXT) \
	dbmail-users$(EXEEXT) dbmail-export$(EXEEXT) \
	dbmail-httpd$(EXEEXT) dbmail-lmtpd$(EXEEXT) $(am__EXEEXT_1)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/dbmail.h.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = dbmail.h
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(pkglibdir)" "$(DESTDIR)$(sbindir)"
LTLIBRARIES = $(noinst_LTLIBRARIES) $(pkglib_LTLIBRARIES)
am__DEPENDENCIES_1 =
libdbmail_la_DEPENDENCIES = $(am__DEPENDENCIES_1)
am__libdbmail_la_SOURCES_DIST = dbmail-user.c dbmail-message.c \
	dbmail-mailbox.c dm_mailboxstate.c dm_cram.c dm_capa.c \
	dm_config.c dm_debug.c dm_list.c dm_db.c dm_sievescript.c \
	dm_acl.c dm_misc.c dm_pidfile.c dm_digest.c dm_match.c \
	dm_iconv.c dm_dsn.c dm_sset.c dm_getopt.c server.c \
	clientsession.c clientbase.c dm_tls.c dm_http.c dm_request.c \
	dm_cidr.c authmodule.c sortmodule.c dm_memcache.c
#am__objects_1 = libdbmail_la-dm_getopt.lo
am__objects_2 = libdbmail_la-dbmail-user.lo \
	libdbmail_la-dbmail-message.lo libdbmail_la-dbmail-mailbox.lo \
	libdbmail_la-dm_mailboxstate.lo libdbmail_la-dm_cram.lo \
	libdbmail_la-dm_capa.lo libdbmail_la-dm_config.lo \
	libdbmail_la-dm_debug.lo libdbmail_la-dm_list.lo \
	libdbmail_la-dm_db.lo libdbmail_la-dm_sievescript.lo \
	libdbmail_la-dm_acl.lo libdbmail_la-dm_misc.lo \
	libdbmail_la-dm_pidfile.lo libdbmail_la-dm_digest.lo \
	libdbmail_la-dm_match.lo libdbmail_la-dm_iconv.lo \
	libdbmail_la-dm_dsn.lo libdbmail_la-dm_sset.lo \
	libdbmail_la-dm_memcache.lo \
	$(am__objects_1)
am__objects_3 = libdbmail_la-server.lo libdbmail_la-clientsession.lo \
	libdbmail_la-clientbase.lo libdbmail_la-dm_tls.lo \
	libdbmail_la-dm_http.lo libdbmail_la-dm_request.lo \
	libdbmail_la-dm_cidr.lo
am__objects_4 = libdbmail_la-authmodule.lo \
	libdbmail_la-sortmodule.lo
am_libdbmail_la_OBJECTS = $(am__objects_2) $(am__objects_3) \
	$(am__objects_4)
libdbmail_la_OBJECTS = $(am_libdbmail_la_OBJECTS)
libdbmail_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(libdbmail_la_CFLAGS) \
	$(CFLAGS) $(libdbmail_la_LDFLAGS) $(LDFLAGS) -o $@
#am_libdbmail_la_rpath =
am_libdbmail_la_rpath = -rpath $(pkglibdir)
#am__EXEEXT_1 = dbmail-sievecmd$(EXEEXT) \
#	dbmail-timsieved$(EXEEXT)
PROGRAMS = $(sbin_PROGRAMS)
am_dbmail_deliver_OBJECTS = main.$(OBJEXT)
dbmail_deliver_OBJECTS = $(am_dbmail_deliver_OBJECTS)
dbmail_deliver_DEPENDENCIES = $(am__DEPENDENCIES_1) libdbmail.la
am__objects_5 = dm_quota.$(OBJEXT) dm_memblock.$(OBJEXT) \
	dm_cache.$(OBJEXT) imap4.$(OBJEXT) imapcommands.$(OBJEXT) \
	dbmail-imapsession.$(OBJEXT)
am_dbmail_export_OBJECTS = $(am__objects_5) export.$(OBJEXT)
dbmail_export_OBJECTS = $(am_dbmail_export_OBJECTS)
dbmail_export_DEPENDENCIES = $(am__DEPENDENCIES_1) libdbmail.la
am_dbmail_httpd_OBJECTS = dm_http.$(OBJEXT) httpd.$(OBJEXT)
dbmail_httpd_OBJECTS = $(am_dbmail_httpd_OBJECTS)
dbmail_httpd_DEPENDENCIES = $(am__DEPENDENCIES_1) libdbmail.la
am_dbmail_imapd_OBJECTS = $(am__objects_5) imapd.$(OBJEXT)
dbmail_imapd_OBJECTS = $(am_dbmail_imapd_OBJECTS)
dbmail_imapd_DEPENDENCIES = $(am__DEPENDENCIES_1) libdbmail.la
am_dbmail_lmtpd_OBJECTS = lmtp.$(OBJEXT) lmtpd.$(OBJEXT)
dbmail_lmtpd_OBJECTS = $(am_dbmail_lmtpd_OBJECTS)
dbmail_lmtpd_DEPENDENCIES = $(am__DEPENDENCIES_1) libdbmail.la
am_dbmail_pop3d_OBJECTS = pop3.$(OBJEXT) pop3d.$(OBJEXT)
dbmail_pop3d_OBJECTS = $(am_dbmail_pop3d_OBJECTS)
dbmail_pop3d_DEPENDENCIES = $(am__DEPENDENCIES_1) libdbmail.la
am__dbmail_sievecmd_SOURCES_DIST = sievecmd.c
#am_dbmail_sievecmd_OBJECTS = sievecmd.$(OBJEXT)
dbmail_sievecmd_OBJECTS = $(am_dbmail_sievecmd_OBJECTS)
#dbmail_sievecmd_DEPENDENCIES = $(am__DEPENDENCIES_1) \
#	libdbmail.la
am__dbmail_timsieved_SOURCES_DIST = timsieve.c timsieved.c
#am_dbmail_timsieved_OBJECTS = timsieve.$(OBJEXT) \
#	timsieved.$(OBJEXT)
dbmail_timsieved_OBJECTS = $(am_dbmail_timsieved_OBJECTS)
#dbmail_timsieved_DEPENDENCIES = $(am__DEPENDENCIES_1) \
#	libdbmail.la
am_dbmail_users_OBJECTS = user.$(OBJEXT)
dbmail_users_OBJECTS = $(am_dbmail_users_OBJECTS)
dbmail_users_DEPENDENCIES = $(am__DEPENDENCIES_1) libdbmail.la
am_dbmail_util_OBJECTS = maintenance.$(OBJEXT)
dbmail_util_OBJECTS = $(am_dbmail_util_OBJECTS)
dbmail_util_DEPENDENCIES = $(am__DEPENDENCIES_1) libdbmail.la
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libdbmail_la_SOURCES) $(dbmail_deliver_SOURCES) \
	$(dbmail_export_SOURCES) $(dbmail_httpd_SOURCES) \
	$(dbmail_imapd_SOURCES) $(dbmail_lmtpd_SOURCES) \
	$(dbmail_pop3d_SOURCES) $(dbmail_sievecmd_SOURCES) \
	$(dbmail_timsieved_SOURCES) $(dbmail_users_SOURCES) \
	$(dbmail_util_SOURCES)
DIST_SOURCES = $(am__libdbmail_la_SOURCES_DIST) \
	$(dbmail_deliver_SOURCES) $(dbmail_export_SOURCES) \
	$(dbmail_httpd_SOURCES) $(dbmail_imapd_SOURCES) \
	$(dbmail_lmtpd_SOURCES) $(dbmail_pop3d_SOURCES) \
	$(am__dbmail_sievecmd_SOURCES_DIST) \
	$(am__dbmail_timsieved_SOURCES_DIST) $(dbmail_users_SOURCES) \
	$(dbmail_util_SOURCES)
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-dvi-recursive install-exec-recursive \
	install-html-recursive install-info-recursive \
	install-pdf-recursive install-ps-recursive install-recursive \
	installcheck-recursive installdirs-recursive pdf-recursive \
	ps-recursive uninstall-recursive
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \
	$(RECURSIVE_CLEAN_TARGETS:-recursive=) tags TAGS ctags CTAGS \
	distdir
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = ${SHELL} /home/skraps/projects/dbmail-memcache/config/missing --run aclocal-1.11
AMTAR = ${SHELL} /home/skraps/projects/dbmail-memcache/config/missing --run tar
AR = ar
AUTHALIB = modules/.libs/libauth_sql.a
AUTHLTLIB = modules/libauth_sql.la
AUTOCONF = ${SHELL} /home/skraps/projects/dbmail-memcache/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/skraps/projects/dbmail-memcache/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/skraps/projects/dbmail-memcache/config/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -pthread -I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include   -pthread -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include -I/usr/include/gmime-2.4   -I/usr/include/zdb -W -Wall -Wpointer-arith -Wstrict-prototypes
CHECK_CFLAGS = 
CHECK_LIBS = 
CPP = gcc -E
CPPFLAGS = 
CRYPTLIB = -lcrypt
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DM_CONFDIR = /etc
DM_LOGDIR = /var/log
DM_PKGLIBDIR = 
DM_STATEDIR = /var/run
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld
LDAPINC = 
LDAPLIB = 
LDFLAGS =  -Wl,--export-dynamic -pthread -lmemcached -lgmodule-2.0 -lrt -lglib-2.0   -pthread -lgmime-2.4 -lgobject-2.0 -lgthread-2.0 -lrt -lglib-2.0   -lm -lmhash -levent -lssl -lzdb
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /home/skraps/projects/dbmail-memcache/config/missing --run makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = dbmail
PACKAGE_BUGREPORT = dbmail@dbmail.org
PACKAGE_NAME = dbmail
PACKAGE_STRING = dbmail 3.0.2
PACKAGE_TARNAME = dbmail
PACKAGE_URL = 
PACKAGE_VERSION = 3.0.2
PATH_SEPARATOR = :
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SIEVEINC = 
SIEVELIB = 
SOCKETLIB = -lresolv 
SORTALIB = modules/.libs/libsort_null.a
SORTLTLIB = modules/libsort_null.la
SQLITECREATE = "-- Copyright (C) 2005 Internet Connection, Inc.\n" \
"-- Copyright (C) 2006-2010 NFG Net Facilities Group BV.\n" \
"--\n" \
"-- This program is free software; you can redistribute it and/or \n" \
"-- modify it under the terms of the GNU General Public License \n" \
"-- as published by the Free Software Foundation; either \n" \
"-- version 2 of the License, or (at your option) any later \n" \
"-- version.\n" \
"--\n" \
"-- This program is distributed in the hope that it will be useful,\n" \
"-- but WITHOUT ANY WARRANTY; without even the implied warranty of\n" \
"-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" \
"-- GNU General Public License for more details.\n" \
"--\n" \
"-- You should have received a copy of the GNU General Public License\n" \
"-- along with this program; if not, write to the Free Software\n" \
"-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n" \
"-- \n" \
"\n" \
"BEGIN TRANSACTION;\n" \
"\n" \
"PRAGMA auto_vacuum = 1;\n" \
"\n" \
"CREATE TABLE dbmail_aliases (\n" \
"   alias_idnr INTEGER PRIMARY KEY,\n" \
"   alias TEXT NOT NULL,\n" \
"   deliver_to TEXT NOT NULL,\n" \
"   client_idnr INTEGER DEFAULT '0' NOT NULL\n" \
");\n" \
"CREATE INDEX dbmail_aliases_index_1 ON dbmail_aliases(alias);\n" \
"CREATE INDEX dbmail_aliases_index_2 ON dbmail_aliases(client_idnr);\n" \
"\n" \
"CREATE TABLE dbmail_authlog (\n" \
"  id INTEGER PRIMARY KEY,\n" \
"  userid TEXT,\n" \
"  service TEXT,\n" \
"  login_time DATETIME,\n" \
"  logout_time DATETIME,\n" \
"  src_ip TEXT,\n" \
"  src_port INTEGER,\n" \
"  dst_ip TEXT,\n" \
"  dst_port INTEGER,\n" \
"  status TEXT DEFAULT 'active',\n" \
"  bytes_rx INTEGER DEFAULT '0' NOT NULL,\n" \
"  bytes_tx INTEGER DEFAULT '0' NOT NULL\n" \
");\n" \
"\n" \
"CREATE TABLE dbmail_users (\n" \
"   user_idnr INTEGER PRIMARY KEY,\n" \
"   userid TEXT NOT NULL,\n" \
"   passwd TEXT NOT NULL,\n" \
"   client_idnr INTEGER DEFAULT '0' NOT NULL,\n" \
"   maxmail_size INTEGER DEFAULT '0' NOT NULL,\n" \
"   curmail_size INTEGER DEFAULT '0' NOT NULL,\n" \
"   encryption_type TEXT DEFAULT '' NOT NULL,\n" \
"   last_login DATETIME DEFAULT '1979-11-03 22:05:58' NOT NULL\n" \
");\n" \
"CREATE UNIQUE INDEX dbmail_users_1 ON dbmail_users(userid);\n" \
"\n" \
"CREATE TABLE dbmail_mailboxes (\n" \
"   mailbox_idnr INTEGER PRIMARY KEY,\n" \
"   owner_idnr INTEGER DEFAULT '0' NOT NULL,\n" \
"   name TEXT BINARY NOT NULL,\n" \
"   seq INTEGER DEFAULT '0' NOT NULL,\n" \
"   seen_flag BOOLEAN default '0' not null,\n" \
"   answered_flag BOOLEAN default '0' not null,\n" \
"   deleted_flag BOOLEAN default '0' not null,\n" \
"   flagged_flag BOOLEAN default '0' not null,\n" \
"   recent_flag BOOLEAN default '0' not null,\n" \
"   draft_flag BOOLEAN default '0' not null,\n" \
"   no_inferiors BOOLEAN default '0' not null,\n" \
"   no_select BOOLEAN default '0' not null,\n" \
"   permission BOOLEAN default '2'\n" \
");\n" \
"CREATE INDEX dbmail_mailboxes_1 ON dbmail_mailboxes(name);\n" \
"CREATE INDEX dbmail_mailboxes_2 ON dbmail_mailboxes(owner_idnr);\n" \
"CREATE UNIQUE INDEX dbmail_mailboxes_3 ON dbmail_mailboxes(owner_idnr,name);\n" \
"CREATE INDEX dbmail_mailbox_4 ON dbmail_mailboxes(seq);\n" \
"\n" \
"CREATE TRIGGER fk_insert_mailboxes_users_idnr\n" \
"	BEFORE INSERT ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.owner_idnr IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_mailboxes\" violates foreign key constraint \"fk_insert_mailboxes_users_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_mailboxes_users_idnr\n" \
"	BEFORE UPDATE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.owner_idnr IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_mailboxes\" violates foreign key constraint \"fk_update2_mailboxes_users_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_mailboxes_users_idnr\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_mailboxes SET owner_idnr = new.user_idnr WHERE owner_idnr = OLD.user_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_mailboxes_users_idnr\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_mailboxes WHERE owner_idnr = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_subscription (\n" \
"	user_id INTEGER NOT NULL,\n" \
"	mailbox_id INTEGER NOT NULL\n" \
");\n" \
"CREATE UNIQUE INDEX dbmail_subscriptioin_1 ON dbmail_subscription(user_id, mailbox_id);\n" \
"\n" \
"CREATE TRIGGER fk_insert_subscription_users_idnr\n" \
"	BEFORE INSERT ON dbmail_subscription\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_subscription\" violates foreign key constraint \"fk_insert_subscription_users_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_subscription_users_idnr\n" \
"	BEFORE UPDATE ON dbmail_subscription\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_subscription\" violates foreign key constraint \"fk_update1_subscription_users_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_subscription_users_idnr\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_subscription SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_subscription_users_idnr\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_subscription WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_insert_subscription_mailbox_id\n" \
"	BEFORE INSERT ON dbmail_subscription\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_id IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_subscription\" violates foreign key constraint \"fk_insert_subscription_mailbox_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_subscription_mailbox_id\n" \
"	BEFORE UPDATE ON dbmail_subscription\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_id IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_subscription\" violates foreign key constraint \"fk_update1_subscription_mailbox_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_subscription_mailbox_id\n" \
"	AFTER UPDATE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_subscription SET mailbox_id = new.mailbox_idnr WHERE mailbox_id = OLD.mailbox_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_subscription_mailbox_id\n" \
"	BEFORE DELETE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_subscription WHERE mailbox_id = OLD.mailbox_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_acl (\n" \
"	user_id INTEGER NOT NULL,\n" \
"	mailbox_id INTEGER NOT NULL,\n" \
"	lookup_flag BOOLEAN default '0' not null,\n" \
"	read_flag BOOLEAN default '0' not null,\n" \
"	seen_flag BOOLEAN default '0' not null,\n" \
"	write_flag BOOLEAN default '0' not null,\n" \
"	insert_flag BOOLEAN default '0' not null,	\n" \
"	post_flag BOOLEAN default '0' not null,\n" \
"	create_flag BOOLEAN default '0' not null,	\n" \
"	delete_flag BOOLEAN default '0' not null,	\n" \
"	deleted_flag BOOLEAN default '0' not null,	\n" \
"	expunge_flag BOOLEAN default '0' not null,	\n" \
"	administer_flag BOOLEAN default '0' not null\n" \
");\n" \
"CREATE INDEX dbmail_acl_1 ON dbmail_acl(user_id);\n" \
"CREATE INDEX dbmail_acl_2 ON dbmail_acl(mailbox_id);\n" \
"CREATE UNIQUE INDEX dbmail_acl_3 ON dbmail_acl(user_id, mailbox_id);\n" \
"\n" \
"CREATE TRIGGER fk_insert_acl_user_id\n" \
"	BEFORE INSERT ON dbmail_acl\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_acl\" violates foreign key constraint \"fk_insert_acl_user_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_acl_user_id\n" \
"	BEFORE UPDATE ON dbmail_acl\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_acl\" violates foreign key constraint \"fk_update1_acl_user_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_acl_user_id\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_acl SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_acl_user_id\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_acl WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_insert_acl_mailbox_id\n" \
"	BEFORE INSERT ON dbmail_acl\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_id IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_acl\" violates foreign key constraint \"fk_insert_acl_mailbox_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_acl_mailbox_id\n" \
"	BEFORE UPDATE ON dbmail_acl\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_id IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_acl\" violates foreign key constraint \"fk_update1_acl_mailbox_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_acl_mailbox_id\n" \
"	AFTER UPDATE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_acl SET mailbox_id = new.mailbox_idnr WHERE mailbox_id = OLD.mailbox_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_acl_mailbox_id\n" \
"	BEFORE DELETE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_acl WHERE mailbox_id = OLD.mailbox_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_physmessage (\n" \
"   id INTEGER PRIMARY KEY,\n" \
"   messagesize INTEGER DEFAULT '0' NOT NULL,\n" \
"   rfcsize INTEGER DEFAULT '0' NOT NULL,\n" \
"   internal_date DATETIME default '0' not null\n" \
");\n" \
" \n" \
"CREATE TABLE dbmail_messages (\n" \
"   message_idnr INTEGER PRIMARY KEY,\n" \
"   mailbox_idnr INTEGER DEFAULT '0' NOT NULL,\n" \
"   physmessage_id INTEGER DEFAULT '0' NOT NULL,\n" \
"   seen_flag BOOLEAN default '0' not null,\n" \
"   answered_flag BOOLEAN default '0' not null,\n" \
"   deleted_flag BOOLEAN default '0' not null,\n" \
"   flagged_flag BOOLEAN default '0' not null,\n" \
"   recent_flag BOOLEAN default '0' not null,\n" \
"   draft_flag BOOLEAN default '0' not null,\n" \
"   unique_id TEXT NOT NULL,\n" \
"   status BOOLEAN unsigned default '0' not null\n" \
");\n" \
"CREATE INDEX dbmail_messages_1 ON dbmail_messages(mailbox_idnr);\n" \
"CREATE INDEX dbmail_messages_2 ON dbmail_messages(physmessage_id);\n" \
"CREATE INDEX dbmail_messages_3 ON dbmail_messages(seen_flag);\n" \
"CREATE INDEX dbmail_messages_4 ON dbmail_messages(unique_id);\n" \
"CREATE INDEX dbmail_messages_5 ON dbmail_messages(status);\n" \
"CREATE INDEX dbmail_messages_6 ON dbmail_messages(mailbox_idnr,status);\n" \
"CREATE INDEX dbmail_messages_7 ON dbmail_messages(mailbox_idnr,status,seen_flag);\n" \
"CREATE INDEX dbmail_messages_8 ON dbmail_messages(mailbox_idnr,status,recent_flag);\n" \
"\n" \
"CREATE TRIGGER fk_insert_messages_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_messages\" violates foreign key constraint \"fk_insert_messages_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_messages_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_messages\" violates foreign key constraint \"fk_update1_messages_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_messages_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_messages SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_message_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_messages WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"\n" \
"CREATE TRIGGER fk_insert_messages_mailbox_idnr\n" \
"	BEFORE INSERT ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_idnr IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_messages\" violates foreign key constraint \"fk_insert_messages_mailbox_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_messages_mailbox_idnr\n" \
"	BEFORE UPDATE ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.mailbox_idnr IS NOT NULL)\n" \
"				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_messages\" violates foreign key constraint \"fk_update1_messages_mailbox_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_messages_mailbox_idnr\n" \
"	AFTER UPDATE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_messages SET mailbox_idnr = new.mailbox_idnr WHERE mailbox_idnr = OLD.mailbox_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_messages_mailbox_idnr\n" \
"	BEFORE DELETE ON dbmail_mailboxes\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_messages WHERE mailbox_idnr = OLD.mailbox_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"   \n" \
"CREATE TABLE dbmail_messageblks (\n" \
"   messageblk_idnr INTEGER PRIMARY KEY,\n" \
"   physmessage_id INTEGER DEFAULT '0' NOT NULL,\n" \
"   messageblk TEXT NOT NULL,\n" \
"   blocksize INTEGER DEFAULT '0' NOT NULL,\n" \
"   is_header BOOLEAN DEFAULT '0' NOT NULL\n" \
");\n" \
"CREATE INDEX dbmail_messageblks_1 ON dbmail_messageblks(physmessage_id);\n" \
"CREATE INDEX dbmail_messageblks_2 ON dbmail_messageblks(physmessage_id, is_header);\n" \
"\n" \
"CREATE TRIGGER fk_insert_messageblks_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_messageblks\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_messageblks\" violates foreign key constraint \"fk_insert_messageblks_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_messageblks_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_messageblks\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_messageblks\" violates foreign key constraint \"fk_update1_messageblks_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_messageblks_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_messageblks SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_messageblks_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_messageblks WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
" \n" \
"CREATE TABLE dbmail_auto_replies (\n" \
"   user_idnr INTEGER PRIMARY KEY,\n" \
"   reply_body TEXT,  \n" \
"   start_date DATETIME DEFAULT '1980-01-01 22:05:58' NOT NULL,\n" \
"   stop_date DATETIME DEFAULT '1980-01-01 22:05:58' NOT NULL\n" \
");                   \n" \
"CREATE TRIGGER fk_insert_auto_replies_user_idnr\n" \
"        BEFORE INSERT ON dbmail_auto_replies\n" \
"        FOR EACH ROW BEGIN\n" \
"                SELECT CASE \n" \
"                        WHEN (new.user_idnr IS NOT NULL)\n" \
"                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)\n" \
"                        THEN RAISE (ABORT, 'insert on table \"dbmail_auto_replies\" violates foreign key constraint \"fk_insert_auto_replies_user_idnr\"')\n" \
"                END; \n" \
"        END;         \n" \
"CREATE TRIGGER fk_update1_auto_replies_user_idnr\n" \
"        BEFORE UPDATE ON dbmail_auto_replies\n" \
"        FOR EACH ROW BEGIN\n" \
"                SELECT CASE \n" \
"                        WHEN (new.user_idnr IS NOT NULL)\n" \
"                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)\n" \
"                        THEN RAISE (ABORT, 'update on table \"dbmail_auto_replies\" violates foreign key constraint \"fk_update1_auto_replies_user_idnr\"')\n" \
"                END; \n" \
"        END;         \n" \
"CREATE TRIGGER fk_update2_auto_replies_user_idnr\n" \
"        AFTER UPDATE ON dbmail_users\n" \
"        FOR EACH ROW BEGIN\n" \
"                UPDATE dbmail_auto_replies SET user_idnr = new.user_idnr WHERE user_idnr = OLD.user_idnr;\n" \
"        END;         \n" \
"CREATE TRIGGER fk_delete_auto_replies_user_idnr\n" \
"        BEFORE DELETE ON dbmail_users\n" \
"        FOR EACH ROW BEGIN\n" \
"                DELETE FROM dbmail_auto_replies WHERE user_idnr = OLD.user_idnr;\n" \
"        END;         \n" \
"                     \n" \
"CREATE TABLE dbmail_auto_notifications (\n" \
"   user_idnr INTEGER PRIMARY KEY,\n" \
"   notify_address TEXT  \n" \
");                   \n" \
"\n" \
"CREATE TRIGGER fk_insert_auto_notifications_user_idnr\n" \
"        BEFORE INSERT ON dbmail_auto_notifications\n" \
"        FOR EACH ROW BEGIN\n" \
"                SELECT CASE \n" \
"                        WHEN (new.user_idnr IS NOT NULL)\n" \
"                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)\n" \
"                        THEN RAISE (ABORT, 'insert on table \"dbmail_auto_notifications\" violates foreign key constraint \"fk_insert_auto_notifications_user_idnr\"')\n" \
"                END; \n" \
"        END;         \n" \
"CREATE TRIGGER fk_update1_auto_notifications_user_idnr\n" \
"        BEFORE UPDATE ON dbmail_auto_notifications\n" \
"        FOR EACH ROW BEGIN\n" \
"                SELECT CASE \n" \
"                        WHEN (new.user_idnr IS NOT NULL)\n" \
"                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)\n" \
"                        THEN RAISE (ABORT, 'update on table \"dbmail_auto_notifications\" violates foreign key constraint \"fk_update1_auto_notifications_user_idnr\"')\n" \
"                END; \n" \
"        END;         \n" \
"CREATE TRIGGER fk_update2_auto_notifications_user_idnr\n" \
"        AFTER UPDATE ON dbmail_users\n" \
"        FOR EACH ROW BEGIN\n" \
"                UPDATE dbmail_auto_notifications SET user_idnr = new.user_idnr WHERE user_idnr = OLD.user_idnr;\n" \
"        END;         \n" \
"CREATE TRIGGER fk_delete_auto_notifications_user_idnr\n" \
"        BEFORE DELETE ON dbmail_users\n" \
"        FOR EACH ROW BEGIN\n" \
"                DELETE FROM dbmail_auto_notifications WHERE user_idnr = OLD.user_idnr;\n" \
"        END;         \n" \
"                     \n" \
"\n" \
"\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_pbsp (\n" \
"   idnr INTEGER PRIMARY KEY,\n" \
"   since DATETIME default '0' not null,\n" \
"   ipnumber TEXT NOT NULL\n" \
");\n" \
"CREATE UNIQUE INDEX dbmail_pbsp_1 ON dbmail_pbsp(ipnumber);\n" \
"CREATE INDEX dbmail_pbsp_2 ON dbmail_pbsp(since);\n" \
"\n" \
"CREATE TABLE dbmail_sievescripts (\n" \
"  owner_idnr INTEGER DEFAULT '0' NOT NULL,\n" \
"  name TEXT NOT NULL,\n" \
"  script TEXT,\n" \
"  active BOOLEAN default '0' not null\n" \
");\n" \
"CREATE INDEX dbmail_sievescripts_1 ON dbmail_sievescripts(name);\n" \
"CREATE INDEX dbmail_sievescripts_2 ON dbmail_sievescripts(owner_idnr);\n" \
"CREATE UNIQUE INDEX dbmail_sievescripts_3 ON dbmail_sievescripts(owner_idnr,name);\n" \
"\n" \
"CREATE TRIGGER fk_insert_sievescripts_owner_idnr\n" \
"	BEFORE INSERT ON dbmail_sievescripts\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.owner_idnr IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_sievescripts\" violates foreign key constraint \"fk_insert_sievescripts_owner_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_sievescripts_owner_idnr\n" \
"	BEFORE UPDATE ON dbmail_sievescripts\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.owner_idnr IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_sievescripts\" violates foreign key constraint \"fk_update1_sievescripts_owner_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_sievescripts_owner_idnr\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_sievescripts SET owner_idnr = new.user_idnr WHERE owner_idnr = OLD.user_idnr;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_sievescripts_owner_idnr\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_sievescripts WHERE owner_idnr = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"--\n" \
"-- store all headers by storing all headernames and headervalues in separate\n" \
"-- tables.\n" \
"--\n" \
"\n" \
"CREATE TABLE dbmail_headername (\n" \
"	id		INTEGER PRIMARY KEY,\n" \
"	headername	TEXT NOT NULL DEFAULT ''\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_headername_1 on dbmail_headername (headername);\n" \
"\n" \
"CREATE TABLE dbmail_headervalue (\n" \
" 	id		INTEGER NOT NULL PRIMARY KEY,\n" \
"	hash 		TEXT NOT NULL,\n" \
"        headervalue   	BLOB NOT NULL,\n" \
"	sortfield	TEXT NOT NULL,\n" \
"	datefield	DATETIME\n" \
");\n" \
"CREATE INDEX dbmail_headervalue_1 ON dbmail_headervalue(hash);\n" \
"CREATE INDEX dbmail_headervalue_2 ON dbmail_headervalue(sortfield);\n" \
"CREATE INDEX dbmail_headervalue_3 ON dbmail_headervalue(datefield);\n" \
"\n" \
"CREATE TABLE dbmail_header (\n" \
"        physmessage_id      INTEGER NOT NULL,\n" \
"	headername_id       INTEGER NOT NULL,\n" \
"        headervalue_id      INTEGER NOT NULL\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_header_1 ON dbmail_header(physmessage_id,headername_id,headervalue_id);\n" \
"\n" \
"CREATE TRIGGER fk_insert_header_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_header\" violates foreign key constraint \"fk_insert_header_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update_header_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_header\" violates foreign key constraint \"fk_update_header_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update2_header_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_header SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_delete_header_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_header WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_insert_header_headername_id\n" \
"	BEFORE INSERT ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.headername_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_headername WHERE id = new.headername_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_header\" violates foreign key constraint \"fk_insert_header_headername_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update_header_headername_id\n" \
"	BEFORE UPDATE ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.headername_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_headername WHERE id = new.headername_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_header\" violates foreign key constraint \"fk_update_header_headername_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update2_header_headername_id\n" \
"	AFTER UPDATE ON dbmail_headername\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_header SET headername_id = new.id WHERE headername_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_delete_header_headername_id\n" \
"	BEFORE DELETE ON dbmail_headername\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_header WHERE headername_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_insert_header_headervalue_id\n" \
"	BEFORE INSERT ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.headervalue_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_headervalue WHERE id = new.headervalue_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_header\" violates foreign key constraint \"fk_insert_header_headervalue_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update_header_headervalue_id\n" \
"	BEFORE UPDATE ON dbmail_header\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.headervalue_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_headervalue WHERE id = new.headervalue_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_header\" violates foreign key constraint \"fk_update_header_headervalue_id\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update2_header_headervalue_id\n" \
"	AFTER UPDATE ON dbmail_headervalue\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_header SET headervalue_id = new.id WHERE headervalue_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_delete_header_headervalue_id\n" \
"	BEFORE DELETE ON dbmail_headervalue\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_header WHERE headervalue_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"\n" \
"\n" \
"-- Threading\n" \
"\n" \
"-- support fast threading by breaking out In-Reply-To/References headers\n" \
"-- these fields contain zero or more Message-Id values that determine the message\n" \
"-- threading\n" \
"\n" \
"CREATE TABLE dbmail_referencesfield (\n" \
"        physmessage_id  INTEGER NOT NULL,\n" \
"	id		INTEGER NOT NULL PRIMARY KEY,\n" \
"	referencesfield	TEXT NOT NULL DEFAULT ''\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_referencesfield_1 on dbmail_referencesfield (physmessage_id, referencesfield);\n" \
"--	FOREIGN KEY (physmessage_id)\n" \
"--			REFERENCES dbmail_physmessage(id)\n" \
"--			ON UPDATE CASCADE ON DELETE CASCADE\n" \
"\n" \
"CREATE TRIGGER fk_insert_referencesfield_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_referencesfield\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_referencesfield\" violates foreign key constraint \"fk_insert_referencesfield_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_referencesfield_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_referencesfield\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_referencesfield\" violates foreign key constraint \"fk_update1_referencesfield_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_referencesfield_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_referencesfield SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_referencesfield_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_referencesfield WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"-- Table structure for table `dbmail_replycache`\n" \
"\n" \
"CREATE TABLE dbmail_replycache (\n" \
"  to_addr TEXT NOT NULL default '',\n" \
"  from_addr TEXT NOT NULL default '',\n" \
"  handle TEXT NOT NULL default '',\n" \
"  lastseen datetime NOT NULL default '0000-00-00 00:00:00'\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_replycache_1 on dbmail_replycache (to_addr,from_addr, handle);\n" \
"\n" \
"--\n" \
"-- Add tables and columns to hold Sieve scripts.\n" \
"\n" \
"\n" \
"CREATE TABLE dbmail_usermap (\n" \
"  login TEXT NOT NULL,\n" \
"  sock_allow TEXT NOT NULL,\n" \
"  sock_deny TEXT NOT NULL,\n" \
"  userid TEXT NOT NULL\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX usermap_idx_1 ON dbmail_usermap(login, sock_allow, userid);\n" \
"\n" \
"\n" \
"\n" \
"\n" \
"-- Create the user for the delivery chain\n" \
"INSERT INTO dbmail_users (userid, passwd, encryption_type) \n" \
"	VALUES ('__@!internal_delivery_user!@__', '', 'md5');\n" \
"-- Create the 'anyone' user which is used for ACLs.\n" \
"INSERT INTO dbmail_users (userid, passwd, encryption_type) \n" \
"	VALUES ('anyone', '', 'md5');\n" \
"-- Create the user to own #Public mailboxes\n" \
"INSERT INTO dbmail_users (userid, passwd, encryption_type) \n" \
"	VALUES ('__public__', '', 'md5');\n" \
"\n" \
"COMMIT;\n" \
"\n" \
"\n" \
"-- support faster FETCH commands by caching ENVELOPE information\n" \
"\n" \
"CREATE TABLE dbmail_envelope (\n" \
"        physmessage_id  INTEGER NOT NULL,\n" \
"	id		INTEGER NOT NULL PRIMARY KEY,\n" \
"	envelope	TEXT NOT NULL DEFAULT ''\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_envelope_1 on dbmail_envelope (physmessage_id);\n" \
"CREATE UNIQUE INDEX dbmail_envelope_2 on dbmail_envelope (physmessage_id, id);\n" \
"\n" \
"CREATE TRIGGER fk_insert_envelope_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_envelope\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_envelope\" violates foreign key constraint \"fk_insert_envelope_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update1_envelope_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_envelope\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_envelope\" violates foreign key constraint \"fk_update1_envelope_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"CREATE TRIGGER fk_update2_envelope_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_envelope SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"CREATE TRIGGER fk_delete_envelope_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_envelope WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"\n" \
"\n" \
"--\n" \
"-- 2.3.x additions\n" \
"--\n" \
"\n" \
"DROP TABLE IF EXISTS dbmail_mimeparts;\n" \
"CREATE TABLE dbmail_mimeparts (\n" \
"	id	INTEGER NOT NULL PRIMARY KEY,\n" \
"	hash	TEXT NOT NULL,\n" \
"	data	BLOB NOT NULL,\n" \
"	size	INTEGER NOT NULL\n" \
");\n" \
"\n" \
"CREATE INDEX dbmail_mimeparts_1 ON dbmail_mimeparts(hash);\n" \
"\n" \
"DROP TABLE IF EXISTS dbmail_partlists;\n" \
"CREATE TABLE dbmail_partlists (\n" \
"	physmessage_id	INTEGER NOT NULL,\n" \
"   	is_header 	BOOLEAN DEFAULT '0' NOT NULL,\n" \
"	part_key	INTEGER DEFAULT '0' NOT NULL,\n" \
"	part_depth	INTEGER DEFAULT '0' NOT NULL,\n" \
"	part_order	INTEGER DEFAULT '0' NOT NULL,\n" \
"	part_id		INTEGER NOT NULL\n" \
");\n" \
"\n" \
"CREATE INDEX dbmail_partlists_1 ON dbmail_partlists(physmessage_id);\n" \
"CREATE INDEX dbmail_partlists_2 ON dbmail_partlists(part_id);\n" \
"CREATE UNIQUE INDEX message_parts ON dbmail_partlists(physmessage_id, part_key, part_depth, part_order);\n" \
"\n" \
"-- ALTER TABLE ONLY dbmail_partlists\n" \
"--    ADD CONSTRAINT dbmail_partlists_part_id_fkey FOREIGN KEY (part_id) REFERENCES dbmail_mimeparts(id) ON UPDATE CASCADE ON DELETE CASCADE;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_insert_partlists_mimeparts_id;\n" \
"CREATE TRIGGER fk_insert_partlists_mimeparts_id\n" \
"	BEFORE INSERT ON dbmail_partlists\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.part_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_mimeparts WHERE id = new.part_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_partlists\" violates foreign key constraint \"fk_insert_partlists_mimeparts_id\"')\n" \
"		END;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_update_partlists_mimeparts_id;\n" \
"CREATE TRIGGER fk_update_partlists_mimeparts_id\n" \
"	BEFORE UPDATE ON dbmail_partlists\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.part_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_mimeparts WHERE id = new.part_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_partlists\" violates foreign key constraint \"fk_update_partlists_mimeparts_id\"')\n" \
"		END;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_update2_partlists_mimeparts_id;\n" \
"CREATE TRIGGER fk_update2_partlists_mimeparts_id\n" \
"	AFTER UPDATE ON dbmail_mimeparts\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_partlists SET part_id = new.id WHERE part_id = OLD.id;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_delete_partlists_mimeparts_id;\n" \
"CREATE TRIGGER fk_delete_partlists_mimeparts_id\n" \
"	BEFORE DELETE ON dbmail_mimeparts\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_partlists WHERE part_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"-- ALTER TABLE ONLY dbmail_partlists\n" \
"--    ADD CONSTRAINT dbmail_partlists_physmessage_id_fkey FOREIGN KEY (physmessage_id) REFERENCES dbmail_physmessage(id) ON UPDATE CASCADE ON DELETE CASCADE;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_insert_partlists_physmessage_id;\n" \
"CREATE TRIGGER fk_insert_partlists_physmessage_id\n" \
"	BEFORE INSERT ON dbmail_partlists\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_partlists\" violates foreign key constraint \"fk_insert_partlists_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_update_partlists_physmessage_id;\n" \
"CREATE TRIGGER fk_update_partlists_physmessage_id\n" \
"	BEFORE UPDATE ON dbmail_partlists\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.physmessage_id IS NOT NULL)\n" \
"				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_partlists\" violates foreign key constraint \"fk_update_partlists_physmessage_id\"')\n" \
"		END;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_update2_partlists_physmessage_id;\n" \
"CREATE TRIGGER fk_update2_partlists_physmessage_id\n" \
"	AFTER UPDATE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_partlists SET physmessage_id = new.id WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"DROP TRIGGER IF EXISTS fk_delete_partlists_physmessage_id;\n" \
"CREATE TRIGGER fk_delete_partlists_physmessage_id\n" \
"	BEFORE DELETE ON dbmail_physmessage\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_partlists WHERE physmessage_id = OLD.id;\n" \
"	END;\n" \
"\n" \
"CREATE TABLE dbmail_keywords (\n" \
"	keyword		TEXT NOT NULL,\n" \
"	message_idnr	INT NOT NULL\n" \
");\n" \
"CREATE UNIQUE INDEX dbmail_keywords_1 ON dbmail_keywords(keyword,message_idnr);\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_insert_dbmail_keywords_dbmail_messages_message_idnr;\n" \
"CREATE TRIGGER fk_insert_dbmail_keywords_dbmail_messages_message_idnr\n" \
"	BEFORE INSERT ON dbmail_keywords\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.message_idnr IS NOT NULL)\n" \
"				AND ((SELECT message_idnr FROM dbmail_messages WHERE message_idnr = new.message_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_keywords\" violates foreign key constraint \"fk_insert_dbmail_keywords_dbmail_messages_message_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_update_dbmail_keywords_dbmail_messages_message_idnr;\n" \
"CREATE TRIGGER fk_update_dbmail_keywords_dbmail_messages_message_idnr\n" \
"	BEFORE UPDATE ON dbmail_keywords\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.message_idnr IS NOT NULL)\n" \
"				AND ((SELECT message_idnr FROM dbmail_messages WHERE message_idnr = new.message_idnr) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_keywords\" violates foreign key constraint \"fk_update_dbmail_keywords_dbmail_messages_message_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_update2_dbmail_keywords_dbmail_messages_message_idnr;\n" \
"CREATE TRIGGER fk_update2_dbmail_keywords_dbmail_messages_message_idnr\n" \
"	AFTER UPDATE ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_keywords SET message_idnr = new.message_idnr WHERE message_idnr = OLD.message_idnr;\n" \
"	END;\n" \
"\n" \
"DROP TRIGGER IF EXISTS fk_delete_dbmail_keywords_dbmail_messages_message_idnr;\n" \
"CREATE TRIGGER fk_delete_dbmail_keywords_dbmail_messages_message_idnr\n" \
"	BEFORE DELETE ON dbmail_messages\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_keywords WHERE message_idnr = OLD.message_idnr;\n" \
"	END;\n" \
"\n" \
"\n" \
"DROP TABLE IF EXISTS dbmail_filters;\n" \
"CREATE TABLE dbmail_filters (\n" \
"	id           INTEGER PRIMARY KEY,\n" \
"	user_id      INTEGER NOT NULL,\n" \
"	headername   TEXT NOT NULL,\n" \
"	headervalue  TEXT NOT NULL,	\n" \
"	mailbox      TEXT NOT NULL\n" \
");\n" \
"\n" \
"CREATE UNIQUE INDEX dbmail_filters_index_1 ON dbmail_filters(user_id, id);\n" \
"CREATE TRIGGER fk_insert_filters_users_user_idnr\n" \
"	BEFORE INSERT ON dbmail_filters\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'insert on table \"dbmail_filters\" violates foreign key constraint \"fk_insert_filters_users_user_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update_filters_users_user_idnr\n" \
"	BEFORE UPDATE ON dbmail_filters\n" \
"	FOR EACH ROW BEGIN\n" \
"		SELECT CASE \n" \
"			WHEN (new.user_id IS NOT NULL)\n" \
"				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)\n" \
"			THEN RAISE (ABORT, 'update on table \"dbmail_filters\" violates foreign key constraint \"fk_update_filters_users_user_idnr\"')\n" \
"		END;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_update2_filters_users_user_idnr\n" \
"	AFTER UPDATE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		UPDATE dbmail_filters SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"CREATE TRIGGER fk_delete_filters_users_user_idnr\n" \
"	BEFORE DELETE ON dbmail_users\n" \
"	FOR EACH ROW BEGIN\n" \
"		DELETE FROM dbmail_filters WHERE user_id = OLD.user_idnr;\n" \
"	END;\n" \
"\n" \
"CREATE VIEW dbmail_fromfield AS\n" \
"        SELECT physmessage_id,sortfield AS fromfield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='from';\n" \
"\n" \
"CREATE VIEW dbmail_ccfield AS\n" \
"        SELECT physmessage_id,sortfield AS ccfield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='cc';\n" \
"\n" \
"CREATE VIEW dbmail_tofield AS\n" \
"        SELECT physmessage_id,sortfield AS tofield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='to';\n" \
"\n" \
"CREATE VIEW dbmail_subjectfield AS\n" \
"        SELECT physmessage_id,headervalue AS subjectfield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='subject';\n" \
"\n" \
"CREATE VIEW dbmail_datefield AS\n" \
"        SELECT physmessage_id,datefield\n" \
"        FROM dbmail_messages m\n" \
"        JOIN dbmail_header h USING (physmessage_id)\n" \
"        JOIN dbmail_headername n ON h.headername_id = n.id\n" \
"        JOIN dbmail_headervalue v ON h.headervalue_id = v.id\n" \
"WHERE n.headername='date';\n" \
"\n" \
"\n" \
"\n"
STRIP = strip
VERSION = 3.0.2
abs_builddir = /home/skraps/projects/dbmail-memcache/src
abs_srcdir = /home/skraps/projects/dbmail-memcache/src
abs_top_builddir = /home/skraps/projects/dbmail-memcache
abs_top_srcdir = /home/skraps/projects/dbmail-memcache
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
glibconfig = /usr/bin/pkg-config
gmimeconfig = /usr/bin/pkg-config
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/skraps/projects/dbmail-memcache/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
SUBDIRS = modules
#SIEVEPROGS = dbmail-sievecmd dbmail-timsieved
#DM_GETOPT = dm_getopt.c
COMMON = dbmail-user.c \
	dbmail-message.c \
	dbmail-mailbox.c \
	dm_mailboxstate.c \
	dm_cram.c \
	dm_capa.c \
	dm_config.c \
	dm_debug.c \
	dm_list.c \
	dm_db.c \
	dm_sievescript.c \
	dm_acl.c \
	dm_misc.c \
	dm_pidfile.c \
	dm_digest.c \
	dm_match.c \
	dm_iconv.c \
	dm_dsn.c \
	dm_memcache.c \
	dm_sset.c $(DM_GETOPT)

SERVER = server.c \
	clientsession.c \
	clientbase.c \
	dm_tls.c \
	dm_http.c \
	dm_request.c \
	dm_cidr.c

IMAPD = dm_quota.c \
	dm_memblock.c \
	dm_cache.c \
	imap4.c \
	imapcommands.c \
	dbmail-imapsession.c

AM_CFLAGS =  
INCLUDES = -I$(top_srcdir)
AM_LDFLAGS = -export-dynamic -lcrypt
#MODULES = 
MODULES = authmodule.c sortmodule.c
#STATIC_MODULES = modules/libsort_null.la modules/libauth_sql.la
STATIC_MODULES = 
dbmail_deliver_SOURCES = main.c
dbmail_deliver_LDADD = $(STATIC_MODULES) libdbmail.la
dbmail_pop3d_SOURCES = pop3.c pop3d.c
dbmail_pop3d_LDADD = $(STATIC_MODULES) libdbmail.la
dbmail_imapd_SOURCES = $(IMAPD) imapd.c 
dbmail_imapd_LDADD = $(STATIC_MODULES) libdbmail.la
dbmail_util_SOURCES = maintenance.c
dbmail_util_LDADD = $(STATIC_MODULES) libdbmail.la
dbmail_users_SOURCES = user.c
dbmail_users_LDADD = $(STATIC_MODULES) libdbmail.la
dbmail_export_SOURCES = $(IMAPD) export.c
dbmail_export_LDADD = $(STATIC_MODULES) libdbmail.la
dbmail_lmtpd_SOURCES = lmtp.c lmtpd.c
dbmail_lmtpd_LDADD = $(STATIC_MODULES) libdbmail.la
dbmail_httpd_SOURCES = dm_http.c httpd.c
dbmail_httpd_LDADD = $(STATIC_MODULES) libdbmail.la
#dbmail_sievecmd_SOURCES = sievecmd.c 
#dbmail_sievecmd_LDADD = $(STATIC_MODULES) libdbmail.la
#dbmail_timsieved_SOURCES = timsieve.c timsieved.c
#dbmail_timsieved_LDADD = $(STATIC_MODULES) libdbmail.la
pkglib_LTLIBRARIES = libdbmail.la
#noinst_LTLIBRARIES = libdbmail.la
libdbmail_la_SOURCES = $(COMMON) $(SERVER) $(MODULES)
libdbmail_la_LIBADD = $(STATIC_MODULES)
libdbmail_la_LDFLAGS = $(AM_LDFLAGS) -lresolv 
libdbmail_la_CFLAGS = $(AM_CFLAGS)
all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
dbmail.h: $(top_builddir)/config.status $(srcdir)/dbmail.h.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
install-pkglibLTLIBRARIES: $(pkglib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(pkglibdir)" || $(MKDIR_P) "$(DESTDIR)$(pkglibdir)"
	@list='$(pkglib_LTLIBRARIES)'; test -n "$(pkglibdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(pkglibdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(pkglibdir)"; \
	}

uninstall-pkglibLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(pkglib_LTLIBRARIES)'; test -n "$(pkglibdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(pkglibdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(pkglibdir)/$$f"; \
	done

clean-pkglibLTLIBRARIES:
	-test -z "$(pkglib_LTLIBRARIES)" || rm -f $(pkglib_LTLIBRARIES)
	@list='$(pkglib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libdbmail.la: $(libdbmail_la_OBJECTS) $(libdbmail_la_DEPENDENCIES) 
	$(libdbmail_la_LINK) $(am_libdbmail_la_rpath) $(libdbmail_la_OBJECTS) $(libdbmail_la_LIBADD) $(LIBS)
install-sbinPROGRAMS: $(sbin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(sbindir)" || $(MKDIR_P) "$(DESTDIR)$(sbindir)"
	@list='$(sbin_PROGRAMS)'; test -n "$(sbindir)" || list=; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p || test -f $$p1; \
	  then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(sbindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(sbindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-sbinPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(sbin_PROGRAMS)'; test -n "$(sbindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' `; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(sbindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(sbindir)" && rm -f $$files

clean-sbinPROGRAMS:
	@list='$(sbin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
dbmail-deliver$(EXEEXT): $(dbmail_deliver_OBJECTS) $(dbmail_deliver_DEPENDENCIES) 
	@rm -f dbmail-deliver$(EXEEXT)
	$(LINK) $(dbmail_deliver_OBJECTS) $(dbmail_deliver_LDADD) $(LIBS)
dbmail-export$(EXEEXT): $(dbmail_export_OBJECTS) $(dbmail_export_DEPENDENCIES) 
	@rm -f dbmail-export$(EXEEXT)
	$(LINK) $(dbmail_export_OBJECTS) $(dbmail_export_LDADD) $(LIBS)
dbmail-httpd$(EXEEXT): $(dbmail_httpd_OBJECTS) $(dbmail_httpd_DEPENDENCIES) 
	@rm -f dbmail-httpd$(EXEEXT)
	$(LINK) $(dbmail_httpd_OBJECTS) $(dbmail_httpd_LDADD) $(LIBS)
dbmail-imapd$(EXEEXT): $(dbmail_imapd_OBJECTS) $(dbmail_imapd_DEPENDENCIES) 
	@rm -f dbmail-imapd$(EXEEXT)
	$(LINK) $(dbmail_imapd_OBJECTS) $(dbmail_imapd_LDADD) $(LIBS)
dbmail-lmtpd$(EXEEXT): $(dbmail_lmtpd_OBJECTS) $(dbmail_lmtpd_DEPENDENCIES) 
	@rm -f dbmail-lmtpd$(EXEEXT)
	$(LINK) $(dbmail_lmtpd_OBJECTS) $(dbmail_lmtpd_LDADD) $(LIBS)
dbmail-pop3d$(EXEEXT): $(dbmail_pop3d_OBJECTS) $(dbmail_pop3d_DEPENDENCIES) 
	@rm -f dbmail-pop3d$(EXEEXT)
	$(LINK) $(dbmail_pop3d_OBJECTS) $(dbmail_pop3d_LDADD) $(LIBS)
dbmail-sievecmd$(EXEEXT): $(dbmail_sievecmd_OBJECTS) $(dbmail_sievecmd_DEPENDENCIES) 
	@rm -f dbmail-sievecmd$(EXEEXT)
	$(LINK) $(dbmail_sievecmd_OBJECTS) $(dbmail_sievecmd_LDADD) $(LIBS)
dbmail-timsieved$(EXEEXT): $(dbmail_timsieved_OBJECTS) $(dbmail_timsieved_DEPENDENCIES) 
	@rm -f dbmail-timsieved$(EXEEXT)
	$(LINK) $(dbmail_timsieved_OBJECTS) $(dbmail_timsieved_LDADD) $(LIBS)
dbmail-users$(EXEEXT): $(dbmail_users_OBJECTS) $(dbmail_users_DEPENDENCIES) 
	@rm -f dbmail-users$(EXEEXT)
	$(LINK) $(dbmail_users_OBJECTS) $(dbmail_users_LDADD) $(LIBS)
dbmail-util$(EXEEXT): $(dbmail_util_OBJECTS) $(dbmail_util_DEPENDENCIES) 
	@rm -f dbmail-util$(EXEEXT)
	$(LINK) $(dbmail_util_OBJECTS) $(dbmail_util_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/dbmail-imapsession.Po
include ./$(DEPDIR)/dm_cache.Po
include ./$(DEPDIR)/dm_http.Po
include ./$(DEPDIR)/dm_memblock.Po
include ./$(DEPDIR)/dm_quota.Po
include ./$(DEPDIR)/export.Po
include ./$(DEPDIR)/httpd.Po
include ./$(DEPDIR)/imap4.Po
include ./$(DEPDIR)/imapcommands.Po
include ./$(DEPDIR)/imapd.Po
include ./$(DEPDIR)/libdbmail_la-authmodule.Plo
include ./$(DEPDIR)/libdbmail_la-clientbase.Plo
include ./$(DEPDIR)/libdbmail_la-clientsession.Plo
include ./$(DEPDIR)/libdbmail_la-dbmail-mailbox.Plo
include ./$(DEPDIR)/libdbmail_la-dbmail-message.Plo
include ./$(DEPDIR)/libdbmail_la-dbmail-user.Plo
include ./$(DEPDIR)/libdbmail_la-dm_acl.Plo
include ./$(DEPDIR)/libdbmail_la-dm_capa.Plo
include ./$(DEPDIR)/libdbmail_la-dm_cidr.Plo
include ./$(DEPDIR)/libdbmail_la-dm_config.Plo
include ./$(DEPDIR)/libdbmail_la-dm_cram.Plo
include ./$(DEPDIR)/libdbmail_la-dm_db.Plo
include ./$(DEPDIR)/libdbmail_la-dm_debug.Plo
include ./$(DEPDIR)/libdbmail_la-dm_digest.Plo
include ./$(DEPDIR)/libdbmail_la-dm_dsn.Plo
include ./$(DEPDIR)/libdbmail_la-dm_getopt.Plo
include ./$(DEPDIR)/libdbmail_la-dm_http.Plo
include ./$(DEPDIR)/libdbmail_la-dm_iconv.Plo
include ./$(DEPDIR)/libdbmail_la-dm_list.Plo
include ./$(DEPDIR)/libdbmail_la-dm_mailboxstate.Plo
include ./$(DEPDIR)/libdbmail_la-dm_match.Plo
include ./$(DEPDIR)/libdbmail_la-dm_misc.Plo
include ./$(DEPDIR)/libdbmail_la-dm_pidfile.Plo
include ./$(DEPDIR)/libdbmail_la-dm_request.Plo
include ./$(DEPDIR)/libdbmail_la-dm_sievescript.Plo
include ./$(DEPDIR)/libdbmail_la-dm_sset.Plo
include ./$(DEPDIR)/libdbmail_la-dm_tls.Plo
include ./$(DEPDIR)/libdbmail_la-server.Plo
include ./$(DEPDIR)/libdbmail_la-sortmodule.Plo
include ./$(DEPDIR)/lmtp.Po
include ./$(DEPDIR)/lmtpd.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/maintenance.Po
include ./$(DEPDIR)/pop3.Po
include ./$(DEPDIR)/pop3d.Po
include ./$(DEPDIR)/sievecmd.Po
include ./$(DEPDIR)/timsieve.Po
include ./$(DEPDIR)/timsieved.Po
include ./$(DEPDIR)/user.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

libdbmail_la-dbmail-user.lo: dbmail-user.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dbmail-user.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dbmail-user.Tpo -c -o libdbmail_la-dbmail-user.lo `test -f 'dbmail-user.c' || echo '$(srcdir)/'`dbmail-user.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dbmail-user.Tpo $(DEPDIR)/libdbmail_la-dbmail-user.Plo
#	source='dbmail-user.c' object='libdbmail_la-dbmail-user.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dbmail-user.lo `test -f 'dbmail-user.c' || echo '$(srcdir)/'`dbmail-user.c

libdbmail_la-dbmail-message.lo: dbmail-message.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dbmail-message.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dbmail-message.Tpo -c -o libdbmail_la-dbmail-message.lo `test -f 'dbmail-message.c' || echo '$(srcdir)/'`dbmail-message.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dbmail-message.Tpo $(DEPDIR)/libdbmail_la-dbmail-message.Plo
#	source='dbmail-message.c' object='libdbmail_la-dbmail-message.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dbmail-message.lo `test -f 'dbmail-message.c' || echo '$(srcdir)/'`dbmail-message.c

libdbmail_la-dbmail-mailbox.lo: dbmail-mailbox.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dbmail-mailbox.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dbmail-mailbox.Tpo -c -o libdbmail_la-dbmail-mailbox.lo `test -f 'dbmail-mailbox.c' || echo '$(srcdir)/'`dbmail-mailbox.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dbmail-mailbox.Tpo $(DEPDIR)/libdbmail_la-dbmail-mailbox.Plo
#	source='dbmail-mailbox.c' object='libdbmail_la-dbmail-mailbox.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dbmail-mailbox.lo `test -f 'dbmail-mailbox.c' || echo '$(srcdir)/'`dbmail-mailbox.c

libdbmail_la-dm_mailboxstate.lo: dm_mailboxstate.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_mailboxstate.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_mailboxstate.Tpo -c -o libdbmail_la-dm_mailboxstate.lo `test -f 'dm_mailboxstate.c' || echo '$(srcdir)/'`dm_mailboxstate.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_mailboxstate.Tpo $(DEPDIR)/libdbmail_la-dm_mailboxstate.Plo
#	source='dm_mailboxstate.c' object='libdbmail_la-dm_mailboxstate.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_mailboxstate.lo `test -f 'dm_mailboxstate.c' || echo '$(srcdir)/'`dm_mailboxstate.c

libdbmail_la-dm_memcache.lo: dm_memcache.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_memcache.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_memcache.Tpo -c -o libdbmail_la-dm_memcache.lo `test -f 'dm_memcache.c' || echo '$(srcdir)/'`dm_memcache.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_memcache.Tpo $(DEPDIR)/libdbmail_la-dm_memcache.Plo
#       source='dm_memcache.c' object='libdbmail_la-dm_memcache.lo' libtool=yes \
#       DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#   $(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_memcache.lo `test -f 'dm_memcache.c' || echo '$(srcdir)/'`dm_memcache.c

libdbmail_la-dm_cram.lo: dm_cram.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_cram.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_cram.Tpo -c -o libdbmail_la-dm_cram.lo `test -f 'dm_cram.c' || echo '$(srcdir)/'`dm_cram.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_cram.Tpo $(DEPDIR)/libdbmail_la-dm_cram.Plo
#	source='dm_cram.c' object='libdbmail_la-dm_cram.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_cram.lo `test -f 'dm_cram.c' || echo '$(srcdir)/'`dm_cram.c

libdbmail_la-dm_capa.lo: dm_capa.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_capa.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_capa.Tpo -c -o libdbmail_la-dm_capa.lo `test -f 'dm_capa.c' || echo '$(srcdir)/'`dm_capa.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_capa.Tpo $(DEPDIR)/libdbmail_la-dm_capa.Plo
#	source='dm_capa.c' object='libdbmail_la-dm_capa.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_capa.lo `test -f 'dm_capa.c' || echo '$(srcdir)/'`dm_capa.c

libdbmail_la-dm_config.lo: dm_config.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_config.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_config.Tpo -c -o libdbmail_la-dm_config.lo `test -f 'dm_config.c' || echo '$(srcdir)/'`dm_config.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_config.Tpo $(DEPDIR)/libdbmail_la-dm_config.Plo
#	source='dm_config.c' object='libdbmail_la-dm_config.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_config.lo `test -f 'dm_config.c' || echo '$(srcdir)/'`dm_config.c

libdbmail_la-dm_debug.lo: dm_debug.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_debug.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_debug.Tpo -c -o libdbmail_la-dm_debug.lo `test -f 'dm_debug.c' || echo '$(srcdir)/'`dm_debug.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_debug.Tpo $(DEPDIR)/libdbmail_la-dm_debug.Plo
#	source='dm_debug.c' object='libdbmail_la-dm_debug.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_debug.lo `test -f 'dm_debug.c' || echo '$(srcdir)/'`dm_debug.c

libdbmail_la-dm_list.lo: dm_list.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_list.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_list.Tpo -c -o libdbmail_la-dm_list.lo `test -f 'dm_list.c' || echo '$(srcdir)/'`dm_list.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_list.Tpo $(DEPDIR)/libdbmail_la-dm_list.Plo
#	source='dm_list.c' object='libdbmail_la-dm_list.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_list.lo `test -f 'dm_list.c' || echo '$(srcdir)/'`dm_list.c

libdbmail_la-dm_db.lo: dm_db.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_db.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_db.Tpo -c -o libdbmail_la-dm_db.lo `test -f 'dm_db.c' || echo '$(srcdir)/'`dm_db.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_db.Tpo $(DEPDIR)/libdbmail_la-dm_db.Plo
#	source='dm_db.c' object='libdbmail_la-dm_db.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_db.lo `test -f 'dm_db.c' || echo '$(srcdir)/'`dm_db.c

libdbmail_la-dm_sievescript.lo: dm_sievescript.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_sievescript.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_sievescript.Tpo -c -o libdbmail_la-dm_sievescript.lo `test -f 'dm_sievescript.c' || echo '$(srcdir)/'`dm_sievescript.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_sievescript.Tpo $(DEPDIR)/libdbmail_la-dm_sievescript.Plo
#	source='dm_sievescript.c' object='libdbmail_la-dm_sievescript.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_sievescript.lo `test -f 'dm_sievescript.c' || echo '$(srcdir)/'`dm_sievescript.c

libdbmail_la-dm_acl.lo: dm_acl.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_acl.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_acl.Tpo -c -o libdbmail_la-dm_acl.lo `test -f 'dm_acl.c' || echo '$(srcdir)/'`dm_acl.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_acl.Tpo $(DEPDIR)/libdbmail_la-dm_acl.Plo
#	source='dm_acl.c' object='libdbmail_la-dm_acl.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_acl.lo `test -f 'dm_acl.c' || echo '$(srcdir)/'`dm_acl.c

libdbmail_la-dm_misc.lo: dm_misc.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_misc.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_misc.Tpo -c -o libdbmail_la-dm_misc.lo `test -f 'dm_misc.c' || echo '$(srcdir)/'`dm_misc.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_misc.Tpo $(DEPDIR)/libdbmail_la-dm_misc.Plo
#	source='dm_misc.c' object='libdbmail_la-dm_misc.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_misc.lo `test -f 'dm_misc.c' || echo '$(srcdir)/'`dm_misc.c

libdbmail_la-dm_pidfile.lo: dm_pidfile.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_pidfile.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_pidfile.Tpo -c -o libdbmail_la-dm_pidfile.lo `test -f 'dm_pidfile.c' || echo '$(srcdir)/'`dm_pidfile.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_pidfile.Tpo $(DEPDIR)/libdbmail_la-dm_pidfile.Plo
#	source='dm_pidfile.c' object='libdbmail_la-dm_pidfile.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_pidfile.lo `test -f 'dm_pidfile.c' || echo '$(srcdir)/'`dm_pidfile.c

libdbmail_la-dm_digest.lo: dm_digest.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_digest.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_digest.Tpo -c -o libdbmail_la-dm_digest.lo `test -f 'dm_digest.c' || echo '$(srcdir)/'`dm_digest.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_digest.Tpo $(DEPDIR)/libdbmail_la-dm_digest.Plo
#	source='dm_digest.c' object='libdbmail_la-dm_digest.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_digest.lo `test -f 'dm_digest.c' || echo '$(srcdir)/'`dm_digest.c

libdbmail_la-dm_match.lo: dm_match.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_match.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_match.Tpo -c -o libdbmail_la-dm_match.lo `test -f 'dm_match.c' || echo '$(srcdir)/'`dm_match.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_match.Tpo $(DEPDIR)/libdbmail_la-dm_match.Plo
#	source='dm_match.c' object='libdbmail_la-dm_match.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_match.lo `test -f 'dm_match.c' || echo '$(srcdir)/'`dm_match.c

libdbmail_la-dm_iconv.lo: dm_iconv.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_iconv.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_iconv.Tpo -c -o libdbmail_la-dm_iconv.lo `test -f 'dm_iconv.c' || echo '$(srcdir)/'`dm_iconv.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_iconv.Tpo $(DEPDIR)/libdbmail_la-dm_iconv.Plo
#	source='dm_iconv.c' object='libdbmail_la-dm_iconv.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_iconv.lo `test -f 'dm_iconv.c' || echo '$(srcdir)/'`dm_iconv.c

libdbmail_la-dm_dsn.lo: dm_dsn.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_dsn.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_dsn.Tpo -c -o libdbmail_la-dm_dsn.lo `test -f 'dm_dsn.c' || echo '$(srcdir)/'`dm_dsn.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_dsn.Tpo $(DEPDIR)/libdbmail_la-dm_dsn.Plo
#	source='dm_dsn.c' object='libdbmail_la-dm_dsn.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_dsn.lo `test -f 'dm_dsn.c' || echo '$(srcdir)/'`dm_dsn.c

libdbmail_la-dm_sset.lo: dm_sset.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_sset.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_sset.Tpo -c -o libdbmail_la-dm_sset.lo `test -f 'dm_sset.c' || echo '$(srcdir)/'`dm_sset.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_sset.Tpo $(DEPDIR)/libdbmail_la-dm_sset.Plo
#	source='dm_sset.c' object='libdbmail_la-dm_sset.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_sset.lo `test -f 'dm_sset.c' || echo '$(srcdir)/'`dm_sset.c

libdbmail_la-dm_getopt.lo: dm_getopt.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_getopt.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_getopt.Tpo -c -o libdbmail_la-dm_getopt.lo `test -f 'dm_getopt.c' || echo '$(srcdir)/'`dm_getopt.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_getopt.Tpo $(DEPDIR)/libdbmail_la-dm_getopt.Plo
#	source='dm_getopt.c' object='libdbmail_la-dm_getopt.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_getopt.lo `test -f 'dm_getopt.c' || echo '$(srcdir)/'`dm_getopt.c

libdbmail_la-server.lo: server.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-server.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-server.Tpo -c -o libdbmail_la-server.lo `test -f 'server.c' || echo '$(srcdir)/'`server.c
	$(am__mv) $(DEPDIR)/libdbmail_la-server.Tpo $(DEPDIR)/libdbmail_la-server.Plo
#	source='server.c' object='libdbmail_la-server.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-server.lo `test -f 'server.c' || echo '$(srcdir)/'`server.c

libdbmail_la-clientsession.lo: clientsession.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-clientsession.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-clientsession.Tpo -c -o libdbmail_la-clientsession.lo `test -f 'clientsession.c' || echo '$(srcdir)/'`clientsession.c
	$(am__mv) $(DEPDIR)/libdbmail_la-clientsession.Tpo $(DEPDIR)/libdbmail_la-clientsession.Plo
#	source='clientsession.c' object='libdbmail_la-clientsession.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-clientsession.lo `test -f 'clientsession.c' || echo '$(srcdir)/'`clientsession.c

libdbmail_la-clientbase.lo: clientbase.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-clientbase.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-clientbase.Tpo -c -o libdbmail_la-clientbase.lo `test -f 'clientbase.c' || echo '$(srcdir)/'`clientbase.c
	$(am__mv) $(DEPDIR)/libdbmail_la-clientbase.Tpo $(DEPDIR)/libdbmail_la-clientbase.Plo
#	source='clientbase.c' object='libdbmail_la-clientbase.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-clientbase.lo `test -f 'clientbase.c' || echo '$(srcdir)/'`clientbase.c

libdbmail_la-dm_tls.lo: dm_tls.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_tls.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_tls.Tpo -c -o libdbmail_la-dm_tls.lo `test -f 'dm_tls.c' || echo '$(srcdir)/'`dm_tls.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_tls.Tpo $(DEPDIR)/libdbmail_la-dm_tls.Plo
#	source='dm_tls.c' object='libdbmail_la-dm_tls.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_tls.lo `test -f 'dm_tls.c' || echo '$(srcdir)/'`dm_tls.c

libdbmail_la-dm_http.lo: dm_http.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_http.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_http.Tpo -c -o libdbmail_la-dm_http.lo `test -f 'dm_http.c' || echo '$(srcdir)/'`dm_http.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_http.Tpo $(DEPDIR)/libdbmail_la-dm_http.Plo
#	source='dm_http.c' object='libdbmail_la-dm_http.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_http.lo `test -f 'dm_http.c' || echo '$(srcdir)/'`dm_http.c

libdbmail_la-dm_request.lo: dm_request.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_request.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_request.Tpo -c -o libdbmail_la-dm_request.lo `test -f 'dm_request.c' || echo '$(srcdir)/'`dm_request.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_request.Tpo $(DEPDIR)/libdbmail_la-dm_request.Plo
#	source='dm_request.c' object='libdbmail_la-dm_request.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_request.lo `test -f 'dm_request.c' || echo '$(srcdir)/'`dm_request.c

libdbmail_la-dm_cidr.lo: dm_cidr.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-dm_cidr.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-dm_cidr.Tpo -c -o libdbmail_la-dm_cidr.lo `test -f 'dm_cidr.c' || echo '$(srcdir)/'`dm_cidr.c
	$(am__mv) $(DEPDIR)/libdbmail_la-dm_cidr.Tpo $(DEPDIR)/libdbmail_la-dm_cidr.Plo
#	source='dm_cidr.c' object='libdbmail_la-dm_cidr.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-dm_cidr.lo `test -f 'dm_cidr.c' || echo '$(srcdir)/'`dm_cidr.c

libdbmail_la-authmodule.lo: authmodule.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-authmodule.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-authmodule.Tpo -c -o libdbmail_la-authmodule.lo `test -f 'authmodule.c' || echo '$(srcdir)/'`authmodule.c
	$(am__mv) $(DEPDIR)/libdbmail_la-authmodule.Tpo $(DEPDIR)/libdbmail_la-authmodule.Plo
#	source='authmodule.c' object='libdbmail_la-authmodule.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-authmodule.lo `test -f 'authmodule.c' || echo '$(srcdir)/'`authmodule.c

libdbmail_la-sortmodule.lo: sortmodule.c
	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -MT libdbmail_la-sortmodule.lo -MD -MP -MF $(DEPDIR)/libdbmail_la-sortmodule.Tpo -c -o libdbmail_la-sortmodule.lo `test -f 'sortmodule.c' || echo '$(srcdir)/'`sortmodule.c
	$(am__mv) $(DEPDIR)/libdbmail_la-sortmodule.Tpo $(DEPDIR)/libdbmail_la-sortmodule.Plo
#	source='sortmodule.c' object='libdbmail_la-sortmodule.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libdbmail_la_CFLAGS) $(CFLAGS) -c -o libdbmail_la-sortmodule.lo `test -f 'sortmodule.c' || echo '$(srcdir)/'`sortmodule.c

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

$(RECURSIVE_CLEAN_TARGETS):
	@fail= failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(MKDIR_P) "$(distdir)/$$subdir" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(LTLIBRARIES) $(PROGRAMS)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(pkglibdir)" "$(DESTDIR)$(sbindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	clean-pkglibLTLIBRARIES clean-sbinPROGRAMS mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-pkglibLTLIBRARIES install-sbinPROGRAMS

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-pkglibLTLIBRARIES uninstall-sbinPROGRAMS

.MAKE: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) ctags-recursive \
	install-am install-strip tags-recursive

.PHONY: $(RECURSIVE_CLEAN_TARGETS) $(RECURSIVE_TARGETS) CTAGS GTAGS \
	all all-am check check-am clean clean-generic clean-libtool \
	clean-noinstLTLIBRARIES clean-pkglibLTLIBRARIES \
	clean-sbinPROGRAMS ctags ctags-recursive distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-pkglibLTLIBRARIES \
	install-ps install-ps-am install-sbinPROGRAMS install-strip \
	installcheck installcheck-am installdirs installdirs-am \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags tags-recursive uninstall uninstall-am \
	uninstall-pkglibLTLIBRARIES uninstall-sbinPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
